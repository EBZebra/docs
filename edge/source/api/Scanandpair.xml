<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Scanandpair" parent="Rho" generatedoc="false">
         <HELP_OVERVIEW>The Scanandpair provides mechanism to pair or unpair the Bluetooth device with the remote Bluetooth device using remote device name or mac address. NOTE: Bluetooth is not enabled or disabled by this API for Scanandpair functionality. User need to ensure to enable or disable the Bluetooth using EnterpriseBrowser Intent API or manually via Device settings. Bluetooth connectivity should be in visible state. This API is supported from Android Kitkat version onwards.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
To use this API, the following extension must be included in the `build.yml`:
    extensions: ["scanandpair"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript
        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API

There are two methods of enabling the Scanandpair API:

* Include all 'ebapi' modules
* Include only the API modules you need

Both methods are explained below. 

Either way, the included files will be found in: 
`/Enterprise Browser/JavaScript Files/Enterprise Browser`,
a directory on the computer that contains the Enterprise Browser installation.

### Include all JS API modules
To include all JavaScript APIs, copy the `ebapi-modules.js` file to a location accessible by your app's files and include the JavaScript modules file in your app. For instance, to include the modules file in your `index.html`, copy the file to the same directory as your index.html and add the following line to the HEAD section of your index.html file:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

&gt; This will define the EB class within the page. **Note that the path for this file is relative to the current page** (index.html). Any page on which the modules are required will need to have the required .js file(s) included in this fashion.

### Include only the modules you need
To include individual APIs, you must first include the `ebapi.js` in your HTML, and then the additional required API file(s). For instance, to use the Scanandpair API, add the following code to the HTML file(s). Again, this assumes that relevant API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.scanandpair.js"&gt;&lt;/script&gt;

&gt; In the code lines above, notice that `ebapi.js` is included first, followed by `eb.scanandpair.js`, which is the Scanandpair API for Enterprise Browser. **This coding is required on each HTML page whenever an individual API will be called from that page**.

        </MORE_HELP_EB>
		<PLATFORM>Android</PLATFORM>		
        <TEMPLATES>
            <DEFAULT_INSTANCE/>
            <PROPERTY_BAG/>
        </TEMPLATES>
		
		<CONSTANTS>		
			<!-- ScanAndPairStates -->
			<CONSTANT name="WAITING" value="WAITING" type="STRING">
				<DESC>Represents WAITING, when scanner is waiting for hard trigger press.</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNING" value="SCANNING" type="STRING">
				<DESC>Represents SCANNING, when scanner beam is on, aim at the barcode.</DESC>
			</CONSTANT>
			<CONSTANT name="DISCOVERING" value="DISCOVERING" type="STRING">
				<DESC>Represents DISCOVERING, when discovering the Bluetooth device.</DESC>
			</CONSTANT>
			<CONSTANT name="PAIRED" value="PAIRED" type="STRING">
				<DESC>Represents PAIRED, when the Bluetooth device is paired successfully.</DESC>
			</CONSTANT>
			<CONSTANT name="UNPAIRED" value="UNPAIRED" type="STRING">
				<DESC>Represents UNPAIRED, when the Bluetooth device is unpaired successfully.</DESC>
			</CONSTANT>	
			<CONSTANT name="ERROR" value="ERROR" type="STRING">
				<DESC>Represents ERROR, when the error occurred during pair or unpair. Call getResult property for error code information.</DESC>
			</CONSTANT>	
			<CONSTANT name="UNDEFINED" value="UNDEFINED" type="STRING">
				<DESC>Represents UNDEFINED, when undefined. This is the initial state.</DESC>
			</CONSTANT>	
			<!-- ScanAndPairResult -->
			<CONSTANT name="SUCCESS" value="SUCCESS" type="STRING">
				<DESC>Represents SUCCESS, when the Bluetooth device is paired or unpaired successfully.</DESC>
			</CONSTANT>	
			<CONSTANT name="FAILURE" value="FAILURE" type="STRING">
				<DESC>Represents FAILURE, when operation is failed.</DESC>
			</CONSTANT> 
			<CONSTANT name="INVALID_OBJECT" value="INVALID_OBJECT" type="STRING">
				<DESC>Represents INVALID_OBJECT, when the object is not valid.</DESC>
			</CONSTANT>
			<CONSTANT name="INVALID_CONFIG" value="INVALID_CONFIG" type="STRING">
				<DESC>Represents INVALID_CONFIG, when the configuration is not valid.</DESC>
			</CONSTANT>
			<CONSTANT name="INVALID_BLUETOOTH_DEVICE_INFO" value="INVALID_BLUETOOTH_DEVICE_INFO" type="STRING">
				<DESC>Represents INVALID_BLUETOOTH_DEVICE_INFO, when Bluetooth address or name provided is invalid.</DESC>
			</CONSTANT>
			<CONSTANT name="INVALID_PAIRING_PIN" value="INVALID_PAIRING_PIN" type="STRING">
				<DESC>Represents INVALID_PAIRING_PIN, when Pin entered for Bluetooth pairing is invalid.</DESC>
			</CONSTANT>
			<CONSTANT name="BLUETOOTH_NOT_ENABLED" value="BLUETOOTH_NOT_ENABLED" type="STRING">
				<DESC>Represents BLUETOOTH_NOT_ENABLED, when Bluetooth initialization is failed.</DESC>
			</CONSTANT>
			<CONSTANT name="BLUETOOTH_DEVICE_DISCOVERY_FAILED" value="BLUETOOTH_DEVICE_DISCOVERY_FAILED" type="STRING">
				<DESC>Represents BLUETOOTH_DEVICE_DISCOVERY_FAILED, when unable to discover Bluetooth device.</DESC>
			</CONSTANT>
			<CONSTANT name="BLUETOOTH_SERVICE_DISCOVERY_FAILED" value="BLUETOOTH_SERVICE_DISCOVERY_FAILED" type="STRING">
				<DESC>Represents BLUETOOTH_SERVICE_DISCOVERY_FAILED, when unable to perform Bluetooth service discovery.</DESC>
			</CONSTANT>
			<CONSTANT name="DEVICE_NOT_PAIRED" value="DEVICE_NOT_PAIRED" type="STRING">
				<DESC>Represents DEVICE_NOT_PAIRED, when trying to unpair a Bluetooth device which is not yet paired.</DESC>
			</CONSTANT>
			<CONSTANT name="DEVICE_ALREADY_PAIRED" value="DEVICE_ALREADY_PAIRED" type="STRING">
				<DESC>Represents DEVICE_ALREADY_PAIRED, when trying to pair a Bluetooth device which is already paired.</DESC>
			</CONSTANT>
			<CONSTANT name="DEVICE_PAIRING_FAILED" value="DEVICE_PAIRING_FAILED" type="STRING">
				<DESC>Represents DEVICE_PAIRING_FAILED, when Bluetooth pairing is failed.</DESC>
			</CONSTANT>
			<CONSTANT name="DEVICE_UNPAIRING_FAILED" value="DEVICE_UNPAIRING_FAILED" type="STRING">
				<DESC>Represents DEVICE_UNPAIRING_FAILED, when Bluetooth unpairing is failed.</DESC>
			</CONSTANT>
			<CONSTANT name="PAIRING_TIMEDOUT" value="PAIRING_TIMEDOUT" type="STRING">
				<DESC>Represents PAIRING_TIMEDOUT, when Bluetooth pairing is timed out.</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNER_INIT_FAILURE" value="SCANNER_INIT_FAILURE" type="STRING">
				<DESC>Represents SCANNER_INIT_FAILURE, when there is an error in opening scanner.</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNER_UNINT_FAILED" value="SCANNER_UNINT_FAILED" type="STRING">
				<DESC>Represents SCANNER_UNINT_FAILED, when there is an error in closing scanner</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNER_NOT_SUPPORTED" value="SCANNER_NOT_SUPPORTED" type="STRING">
				<DESC>Represents SCANNER_NOT_SUPPORTED, when scanner is either not supported or not available.</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNER_IN_USE" value="SCANNER_IN_USE" type="STRING">
				<DESC>Represents SCANNER_IN_USE, when scanner is busy in performing some other operation.</DESC>
			</CONSTANT>
			<CONSTANT name="INVALID_SCANNED_DATA" value="INVALID_SCANNED_DATA" type="STRING">
				<DESC>Represents INVALID_SCANNED_DATA, when scanned data is invalid.</DESC>
			</CONSTANT>
			<CONSTANT name="SCANNER_READ_FAILED" value="SCANNER_READ_FAILED" type="STRING">
				<DESC>Represents SCANNER_READ_FAILED, when there is an error in scanning barcode.</DESC>
			</CONSTANT>
			<CONSTANT name="PREVIOUS_COMMAND_PENDING" value="PREVIOUS_COMMAND_PENDING" type="STRING">
				<DESC>Represents PREVIOUS_COMMAND_PENDING, when previously requested command is in progress, wait for it to complete.</DESC>
			</CONSTANT>
			<CONSTANT name="INPROGRESS" value="INPROGRESS" type="STRING">
				<DESC>Represents INPROGRESS, when the scanner is waiting for the H/W trigger to press or when discovering the Bluetooth device or when scanner beam is on and waiting to aim at the barcode.</DESC>
			</CONSTANT>
		</CONSTANTS>
		
         <PROPERTIES access="STATIC" usePropertyBag="accessorsViaPropertyBag" generateAccessors="true">
            <DESC>These properties are used to configure before and after pairing or unpairing the Bluetooth device with the remote Bluetooth device.</DESC>
            <PROPERTY name="alwaysScan" type="BOOLEAN">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies if a scan should always be performed to get the Bluetooth address or name of the remote Bluetooth device. If set to true, the provided deviceName or macAddress properties are ignored and scanning is always done. If set to false, then scanning is skipped and the provided deviceName or macAddress properties are directly used for pairing or unpairing. The default value is set to true.</DESC>
            </PROPERTY>
			<PROPERTY name="deviceIdentifier" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the type of scanner to be used for scanning the barcode. The deviceIdentifier property has no impact if the alwaysScan property is set to false. The default value is set to DEFAULT.</DESC>
				<!-- DeviceIdentifier -->    
				<VALUES>
					<VALUE constName="INTERNAL_CAMERA1" value="INTERNAL_CAMERA1">
						<DESC>Use first available camera.</DESC>
					</VALUE>
					<VALUE constName="INTERNAL_IMAGER1" value="INTERNAL_IMAGER1">
						<DESC>Use first available imager.</DESC>
					</VALUE>
					<VALUE constName="INTERNAL_LASER1" value="INTERNAL_LASER1">
						<DESC>Use first available laser scanner.</DESC>
					</VALUE>
					<VALUE constName="BLUETOOTH_IMAGER1" value="BLUETOOTH_IMAGER1">
						<DESC>Use first available Bluetooth imager. Note: This requires pairing the Bluetooth Imager before calling the pair or unpair methods.</DESC>
					</VALUE>
					<VALUE constName="DEFAULT" value="DEFAULT">
						<DESC>Use default scanner. Depending on the mobile device, the first available scanner can be laser, imager or camera.</DESC>
					</VALUE>
				</VALUES>
            </PROPERTY>
			<PROPERTY name="notificationType" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the notifications which indicate the progress of the different scanning states. The default value is set to BEEPER.</DESC>
				<!-- NotificationType -->
				<VALUES>
					<VALUE constName="BEEPER" value="BEEPER">
						<DESC>Beeper notification. Raises pre-defined beep sequences. This will give the user an audible alert when specific operations are performed.</DESC>
					</VALUE>
					<VALUE constName="NONE" value="NONE">
						<DESC>Disable notification. Do not raise notification for any type of operations.</DESC>
					</VALUE>
				</VALUES>
            </PROPERTY>
			<PROPERTY name="triggerType" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the scanner trigger type. The triggerType property has no impact if the alwaysScan property is set to false. The default value is set to HARD.</DESC>
				<!-- TriggerType -->
				<VALUES>
					<VALUE constName="SOFT" value="SOFT">
						<DESC>Scanner is turned ON automatically and no need to press any triggers.</DESC>
					</VALUE>
					<VALUE constName="HARD" value="HARD">
						<DESC>Hardware trigger needs to be manually pressed to turn ON the scanner.</DESC>
					</VALUE>
				</VALUES>
            </PROPERTY>
			<PROPERTY name="scanTimeout" type="INTEGER">
				<PLATFORM>Android</PLATFORM>
                <DESC>Scan timeout in milliseconds. Specifies the time duration within which the barcode should be scanned. The scanTimeout property has no impact if the alwaysScan property is set to false. The default value is set to 10000 milliseconds. NOTE: The timeout value is provided by the scanner driver and it varies depending on the device. </DESC>
            </PROPERTY>
			<PROPERTY name="scanDataType" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the type of data to be used for pairing or unpairing with the remote Bluetooth device. The type of data could be MAC_ADDRESS or DEVICE_NAME or UNSPECIFIED. The default value is set to UNSPECIFIED. NOTE: It is recommended to specify the type of data to be used i.e. MAC_ADDRESS or DEVICE_NAME. Otherwise it may take time for pairing or unpairing with the remote Bluetooth device.</DESC>
				<!-- ScanDataType --> 
				<VALUES>
					<VALUE constName="MAC_ADDRESS" value="MAC_ADDRESS">
						<DESC>Scan data is a Bluetooth MAC address.</DESC>
					</VALUE>
					<VALUE constName="DEVICE_NAME" value="DEVICE_NAME">
						<DESC>Scan data is a Bluetooth device name.</DESC>
					</VALUE>
					<VALUE constName="UNSPECIFIED" value="UNSPECIFIED">
						<DESC>Scan data type is unknown. The Scanandpair library will automatically attempt to determine if it is a valid mac address. If not, it will be considered as a Bluetooth name. NOTE: This should only be used if alwaysScan property is set to true.</DESC>
					</VALUE>
				</VALUES>
			</PROPERTY>
			<PROPERTY name="deviceName" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the Bluetooth name of the remote Bluetooth device. If the alwaysScan property is set to false, then scanning is skipped and the provided Bluetooth name is directly used for pairing or unpairing. If the alwaysScan property is set to true, then provided Bluetooth name is ignored and scanning is always done. The maximum allowed length of the Bluetooth name barcode that can be scanned or explicitly provided is 123 characters. The deviceName property is always chosen for pairing or unpairing if scanDataType property is set to DEVICE_NAME.</DESC>
            </PROPERTY>
			<PROPERTY name="macAddress" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>Specifies the MAC address of the remote Bluetooth device. If the alwaysScan property is set to false, then scanning is skipped and the provided Bluetooth address is directly used for pairing or unpairing. If the alwaysScan property is set to true, the provided Bluetooth address is ignored and scanning is always done. The allowed lengths of the Bluetooth address barcode that can be scanned is 17 characters. The macAddress property is always chosen for pairing or unpairing if scanDataType property is set to MAC_ADDRESS. NOTE: Ensure to set the colon separted values. For Example: 10:23:A4:CA:50:6D</DESC>
            </PROPERTY>
			<PROPERTY name="getScannedData" type="STRING" readOnly="true">
				<PLATFORM>Android</PLATFORM>
                <DESC>Provides the last scanned data. The maximum allowed length of the barcode that can be scanned is 123 characters. The getScannedData property has no impact if the alwaysScan property is set to false. In such cases, it holds the last scanned data and not the one which is entered manually.</DESC>
            </PROPERTY>
			<PROPERTY name="pairingPin" type="STRING">
				<PLATFORM>Android</PLATFORM>
                <DESC>PIN required to pair with the remote Bluetooth device. The provided authentication PIN is used for pairing. The maximum allowed length for the authentication PIN is 15 characters.</DESC>
            </PROPERTY>
			 <PROPERTY name="isPreviousCommandPending" type="BOOLEAN" readOnly="true">
				<PLATFORM>Android</PLATFORM>
                <DESC>This property provides information, if any of the previous request is pending. If this property returns true, the client application must wait for the previous request to complete before invoking the methods or setting the properties of Scanandpair API.</DESC>
            </PROPERTY>
			<PROPERTY name="getState" type="STRING" readOnly="true">
				<PLATFORM>Android</PLATFORM>
                <DESC>This property provides the exact state of the pair or unpair method.</DESC>
			</PROPERTY>
			<PROPERTY name="getResult" type="STRING" readOnly="true">
				<PLATFORM>Android</PLATFORM>
                <DESC>This property provides the exact result code of the pair or unpair method. Note: When the getState property returns ERROR, this property can be used to find out the exact error code information.</DESC>
			</PROPERTY>
        </PROPERTIES>

        <METHODS access="STATIC">
			<METHOD name="addStatusListener" hasCallback="mandatory">
				<PLATFORM>Android</PLATFORM>
				<DESC>User can register to get status and message notification via callback. NOTE: This is the recommended and an alternative approach to getState and getResult properties. If this method is invoked, it automatically returns all the possible status and its result (one-by-one in an asynchronous manner) via the registered callback without manually invoking the same via getState and getResult properties.</DESC>
				<CALLBACK type="HASH">
                    <PARAMS>
                        <PARAM name="status" type="STRING">
                            <DESC>It provides the exact status of Bluetooth pairing or unpairing.</DESC>
                        </PARAM>
						<PARAM name="result" type="STRING">
                            <DESC>It provides the exact result code of Bluetooth pairing or unpairing.</DESC>
                        </PARAM>
                        <PARAM name="message" type="STRING">
                            <DESC>It provides the exact information related to Bluetooth pairing or unpairing.</DESC>
                        </PARAM>                     
                    </PARAMS>
                </CALLBACK>
			</METHOD>
			<METHOD name="removeStatusListener">
				<PLATFORM>Android</PLATFORM>
				<DESC>User can un-register to get status and message notification via callback.</DESC>
			</METHOD>
            <METHOD name="pair">
				<PLATFORM>Android</PLATFORM>
                <DESC>This method is used for pairing the Bluetooth device with the remote Bluetooth device. It will return the exact result code of Bluetooth pairing on invoking this method. NOTE: If the alwaysScan property is set to true, then this method scans a barcode to get the Bluetooth address or name of a remote Bluetooth device depending on the input provided to the scanDataType property. Else user need to set the property macAddress or deviceName manually of the remote Bluetooth device which need to be paired depending on the input provided to the scanDataType property. User can also register the callback via addStatusListener method before invoking the pair method for getting the detailed status, it's respective result code and it's respective message. It provides information one-by-one in an asynchronous manner via registered callback.</DESC>
                <PARAMS>
                    <PARAM name="pairInfo" type="HASH" propertyHash="true">
                        <DESC>Map of Scanandpair properties to be set. It is used for setting the required information before pairing the Bluetooth device with the remote Bluetooth device. NOTE: If user, has passed the empty argument, then it is mandatory for the user to set the property macAddress or deviceName of the remote Bluetooth device which need to be paired depending on the input provided to the scanDataType property.</DESC>
						<CAN_BE_NIL>
                            <DESC>Not providing properties to this function will use the default properties, or those previously set on the Scanandpair instance. However, it is mandatory for the user to set the property macAddress or deviceName of the remote Bluetooth device which need to be paired depending on the input provided to the scanDataType property.</DESC>
                        </CAN_BE_NIL>
					</PARAM>
                </PARAMS>
				<RETURN type="STRING"/>
            </METHOD>
			<METHOD name="unpair">
				<PLATFORM>Android</PLATFORM>
				<DESC>This method is used for unpairing the Bluetooth device with the remote Bluetooth device. It will return the exact result code of Bluetooth unpairing on invoking this method. NOTE: If the alwaysScan property is set to true, then this method scans a barcode to get the Bluetooth address or name of a remote Bluetooth device depending on the input provided to the scanDataType property. Else user need to set the property macAddress or deviceName manually of the remote Bluetooth device which need to be unpaired depending on the input provided to the scanDataType property. User can also register the callback via addStatusListener method before invoking the unpair method for getting the detailed status, it's respective result code and it's respective message. It provides information one-by-one in an asynchronous manner via registered callback.</DESC>
                <PARAMS>
                    <PARAM name="unpairInfo" type="HASH" propertyHash="true">
                        <DESC>Map of Scanandpair properties to be set. It is used for setting the required information before unpairing the Bluetooth device with the remote Bluetooth device. NOTE: If user, has passed the empty argument, then it is mandatory for the user to set the property macAddress or deviceName of the remote Bluetooth device which need to be unpaired depending on the input provided to the scanDataType property.</DESC>
						<CAN_BE_NIL>
                            <DESC>Not providing properties to this function will use the default properties, or those previously set on the Scanandpair instance. However, it is mandatory for the user to set the property macAddress or deviceName of the remote Bluetooth device which need to be unpaired depending on the input provided to the scanDataType property.</DESC>
                        </CAN_BE_NIL>
					</PARAM>
                </PARAMS>
				<RETURN type="STRING"/>
            </METHOD>
        </METHODS>
        
        <USER_OVERVIEW>
        </USER_OVERVIEW>

        <VER_INTRODUCED>5.0.0</VER_INTRODUCED>
        <PLATFORM>
        </PLATFORM>
		<REMARKS>
			<REMARK title="Android Platform Support">
                <DESC>This API is supported from Android Kitkat version onwards.</DESC>
            </REMARK>
			<REMARK title="Register the callback">
                <DESC>User can invoke addStatusListener method with callback before invoking pair or unpair method for getting the information of different state which occurs while pairing or unpairing the Bluetooth device in an asynchronous manner. NOTE: Before invoking addStatusListener method with the new callback, user should ensure to invoke removeStatusListener method first if user has registered the callback earlier via addStatusListener method or else the earlier callback will remain registered.</DESC>
            </REMARK>
			<REMARK title="Un-register the callback">
                <DESC>At anypoint of time, user can invoke removeStatusListener method if they don't want to get the information of different state which occurs while pairing or unpairing the Bluetooth device.</DESC>
            </REMARK>
			<REMARK title="During Navigation and On Pause">
                <DESC>The registered callback will be un-registered and all data related to Scanandpair will be released, if the navigation has occured or the application is minimized or moved to background.</DESC>
            </REMARK>
			<REMARK title="On Resume">
                <DESC>On resume, the callback and the writeable properties which was set previously by the user will be configured. NOTE: Read only properties will return the default values provided by the underlying library.</DESC>
            </REMARK>
			<REMARK title="Possible values of getState property or status parameter of addStatusListener method">
                <DESC>Possible values of getState property or status parameter of addStatusListener method which is returned inside the registered callback are:

* WAITING
* SCANNING
* DISCOVERING
* PAIRED
* UNPAIRED
* ERROR
* UNDEFINED</DESC>
            </REMARK>
			<REMARK title="Possible values of getResult property or result parameter of addStatusListener method">
                <DESC>Possible values of getResult property or result parameter of addStatusListener method which is returned inside the registered callback are:

* SUCCESS	
* FAILURE 
* INVALID_OBJECT
* INVALID_CONFIG
* INVALID_BLUETOOTH_DEVICE_INFO
* INVALID_PAIRING_PIN
* BLUETOOTH_NOT_ENABLED
* BLUETOOTH_DEVICE_DISCOVERY_FAILED
* BLUETOOTH_SERVICE_DISCOVERY_FAILED
* DEVICE_NOT_PAIRED
* DEVICE_ALREADY_PAIRED
* DEVICE_PAIRING_FAILED
* DEVICE_UNPAIRING_FAILED
* PAIRING_TIMEDOUT
* SCANNER_INIT_FAILURE
* SCANNER_UNINT_FAILED
* SCANNER_NOT_SUPPORTED
* SCANNER_IN_USE
* INVALID_SCANNED_DATA
* SCANNER_READ_FAILED
* PREVIOUS_COMMAND_PENDING
* INPROGRESS</DESC>
            </REMARK>				
        </REMARKS>
		<EXAMPLES>
           <EXAMPLE title="Pair Bluetooth device with the remote Bluetooth device">
            <SECTIONS>
              <SECTION>
               <DESC>Pair Bluetooth device with the remote Bluetooth device with default values.</DESC>
               <CODE>
			   <JAVASCRIPT>
           <![CDATA[
//Define callback method if user want to get the status, result and message notification via addStatusListener method
function pairCallback(object)
{
	document.getElementById('statusID').innerHTML = '<B>Status:' + object.status + '</B>';
	document.getElementById('resultID').innerHTML = '<B>Result Code:' + object.result + '</B>';
	document.getElementById('messageID').innerHTML = '<B>Message:' + object.message + '</B>';
}	
//User need to ensure that if there is any previous request which is pending. If there is no pending request, user can make the further request with the appropriate changes(if any).	
if(EB.Scanandpair.isPreviousCommandPending != true){   		
	//Invoke addStatusListener method for registering the notification via callback i.e. pairCallback
	EB.Scanandpair.addStatusListener(pairCallback);
	
	//By default, the very first time the scanDataType property is set to UNSPECIFIED
	//By default, the very first time the alwaysScan property is set to true which means scanner will be used as a medium for pairing the Bluetooth device with the remote Bluetooth device. User need to ensure that the scanner is present in the Bluetooth device.
	//By default, the very first time the triggerType property is set to HARD which means if there is a valid scanner and user is using the scanner as a medium then user need to press the H/W trigger for pairing after invoking the pair method.
	//By default, the very first time the deviceIdentifier property is set to DEFAULT which means if there is a valid multiple scanner and user is using the scanner as a medium then the first available scanner from the list will be choosed for pairing.
	//Invoke pair method for pairing the Bluetooth device with the remote Bluetooth device
	//Upon calling the pair method, user need to press the H/W trigger to scan the valid mac address or device name of the remote Bluetooth device for pairing.
	//Invoke pair method, the status, result & message of pairing will be notified to pairCallback(one-by-one in an ayshronous manner) as we have registered the same using addStatusListener method.
	var getResult = EB.Scanandpair.pair();
	//getResult will return the values in synchronous manner.
	document.getElementById('myPairOrUnpairResultID').innerHTML = '<B><i>Unpair Returned Value:' + getResult + '</i></B>';
}
                   ]]>
               </JAVASCRIPT>
               </CODE>
              </SECTION>
            </SECTIONS>
           </EXAMPLE>
		   <EXAMPLE title="Pair Bluetooth device with the remote Bluetooth device based on user configuration">
            <SECTIONS>
              <SECTION>
               <DESC>Pair Bluetooth device with the remote Bluetooth device by changing the property values based on user choice.</DESC>
               <CODE>
			   <JAVASCRIPT>
           <![CDATA[
//Define callback method if user want to get the status, result and message notification via addStatusListener method
function pairCallback(object)
{
	document.getElementById('statusID').innerHTML = '<B>Status:' + object.status + '</B>';
	document.getElementById('resultID').innerHTML = '<B>Result Code:' + object.result + '</B>';
	document.getElementById('messageID').innerHTML = '<B>Message:' + object.message + '</B>';
}		 
//User need to ensure that if there is any previous request which is pending. If there is no pending request, user can make the further request with the appropriate changes(if any).	  
if(EB.Scanandpair.isPreviousCommandPending != true){
	//If alwaysScan property is set to false which means user need to manually enter the mac address or device name of the remote Bluetooth device before invoking pair method.
	EB.Scanandpair.alwaysScan = false;
	
	//Set scanDataType property to MAC_ADDRESS if user want to set the mac address of the remote Bluetooth device for pairing
	EB.Scanandpair.scanDataType = "MAC_ADDRESS";

	//Invoke addStatusListener method for registering the notification via callback i.e. pairCallback
	EB.Scanandpair.addStatusListener(pairCallback);
	
	//We are setting macAddress & pairingPin property as an  internal argument to the below pair method
	//NOTE: pairingPin required to pair with the remote Bluetooth device. 
	//The provided authentication pairingPin is used for pairing the Bluetooth device with the remote Bluetooth device.
	//Invoke pair method, the status, result & message of pairing will be notified to pairCallback(one-by-one in an ayshronous manner) as we have registered the same using addStatusListener method.
	EB.Scanandpair.pair({'macAddress':"10:22:33:44:55:6A",'pairingPin':"1111"});
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
              </SECTIONS>
           </EXAMPLE>
		    <EXAMPLE title="Unpair Bluetooth device with the remote Bluetooth device">
            <SECTIONS>
              <SECTION>
               <DESC>Unpair Bluetooth device with the remote Bluetooth device with default values.</DESC>
               <CODE>
			   <JAVASCRIPT>
           <![CDATA[
//Define callback method if user want to get the status, result and message notification via addStatusListener method
function pairCallback(object)
{
	document.getElementById('statusID').innerHTML = '<B>Status:' + object.status + '</B>';
	document.getElementById('resultID').innerHTML = '<B>Result Code:' + object.result + '</B>';
	document.getElementById('messageID').innerHTML = '<B>Message:' + object.message + '</B>';
}	
//User need to ensure that if there is any previous request which is pending. If there is no pending request, user can make the further request with the appropriate changes(if any).	    
if(EB.Scanandpair.isPreviousCommandPending != true){
	//Invoke addStatusListener method for registering the notification via callback i.e. pairCallback
	EB.Scanandpair.addStatusListener(pairCallback);

	//If scanDataType property is set to MAC_ADDRESS
	EB.Scanandpair.scanDataType = "MAC_ADDRESS";
	
	//If alwaysScan property is set to false
	EB.Scanandpair.alwaysScan = false;
	
	//Then set macAddress property to valid MAC address of the remote Bluetooth device
	EB.Scanandpair.macAddress = 10:22:33:44:55:6A;
	
	//Call unpair method for unpairing the Bluetooth device with the remote Bluetooth device.
	//Invoke unpair method, the status, result & message of unpairing will be notified to pairCallback(one-by-one in an ayshronous manner) as we have registered the same using addStatusListener method.
	EB.Scanandpair.unpair();
	
	//Invoke removeStatusListener method for un-registering the notification via callback.
	EB.Scanandpair.removeStatusListener();
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
              </SECTIONS>
           </EXAMPLE>
		</EXAMPLES>
    </MODULE>
</API>    
