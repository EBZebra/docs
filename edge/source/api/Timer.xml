<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Timer" parent="Rho" productException="eb">
        <HELP_OVERVIEW>The Timer API is used to create,start , stop and checking existance of timers.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]
        </MORE_HELP>
         <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Timer API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Timer API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.timer.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.
        </MORE_HELP_EB>
        <PLATFORM>WM, CE, Android, WP8, iOS, Win32</PLATFORM>
        <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
        
        <METHODS>
            <METHOD name="create" access="STATIC">
                <RETURN type="SELF_INSTANCE" />
                <DESC>Create a timers objects.</DESC>
            </METHOD>

            <METHOD name="start" access="INSTANCE" hasCallback="mandatory">
              <PARAMS>
              	<PARAM name="interval" type="INTEGER">
                  <DESC>timer interval in ms</DESC>
                </PARAM>                               
              </PARAMS>
              <CALLBACK type="STRING">
              </CALLBACK>
              <DESC>Start timer with preset interval. Callback fired only one time.</DESC>
            </METHOD>

            <METHOD name="stop" access="INSTANCE">
              <DESC>Stop started timer</DESC>
            </METHOD>

            <METHOD name="isAlive" access="INSTANCE">
              <DESC></DESC>
              <RETURN type="BOOLEAN">
                <DESC>Return alive state of a timer. If callback doesnt fired return true, otherwise return false</DESC>
              </RETURN>
            </METHOD>

        </METHODS>

        <USER_OVERVIEW>
        </USER_OVERVIEW>

        <VER_INTRODUCED>5.1.0</VER_INTRODUCED>
        <PLATFORM>
         </PLATFORM>
           <EXAMPLES>
            <EXAMPLE title="Examples">
                <SECTIONS>
                    <SECTION>
                        <CODE>
                           Implementation of the timer api.
           Create a timer and catch callback after interval:
           
            var timerCallback = function() {
                alert("callback called");
            }                                              

            var timer = Rho.Timer.create();
            timer.start(5000, timerCallback);
            
            Create a timer, start and stop:
            var timerCallback = function() {
                alert("callback called");
            }                                              

            var timer = Rho.Timer.create();
            timer.start(5000, timerCallback);
            setTimeout(function() {
                    timer.stop();
                },3000);
                        </CODE>
                        </SECTION>
                  </SECTIONS>
                   </EXAMPLE>
         </EXAMPLES>
    </MODULE>
</API>
