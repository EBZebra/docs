<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="NewORMModel" parent="Rho" productException="eb">
        <HELP_OVERVIEW>NewORMModel CoreAPI module</HELP_OVERVIEW>
        <MORE_HELP>New implementation of the RHOM Model.
NOTE: BETA VERSION - This API has not been officially released. It should not be used in a production environment.
</MORE_HELP>

        <TEMPLATES>
            <PROPERTY_BAG/>
        </TEMPLATES>

         <PROPERTIES >
            <DESC>List of properties supported by instance of object.</DESC>
            <PROPERTY name="loaded" type="BOOLEAN" usePropertyBag="accessorsViaPropertyBag" >
                <DESC>Returns true if model is loaded.</DESC>
            </PROPERTY>
            <PROPERTY name="model_name" type="STRING" usePropertyBag="accessorsViaPropertyBag" >
                <DESC>Returns model's name.</DESC>
            </PROPERTY>
            <PROPERTY name="sync_type" type="STRING" usePropertyBag="accessorsViaPropertyBag" default="none" >
                <DESC>Returns model's Sync type.</DESC>
				<VALUES>
                    <VALUE value ="none">
                        <DESC>If data model is not a sync model.</DESC>
                    </VALUE>
                    <VALUE value ="incremental">
                        <DESC>Used when the data model is a sync model. Just syncs changes.</DESC>
                    </VALUE>
					<VALUE value ="bulk_only">
                        <DESC>If the model is used only for bulk sync.</DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>
            <PROPERTY name="sync_priority" type="INTEGER" usePropertyBag="accessorsViaPropertyBag">
                <DESC>This number determines the order in which the models are processed and synchronised. Priority starts from lower value 1. Lower the number, higher is the priority. Default value is 1000.</DESC>
            </PROPERTY>
            <PROPERTY name="partition" type="STRING" usePropertyBag="accessorsViaPropertyBag" >
                <DESC>Returns model's Db partition.</DESC>
				<VALUES>
					<VALUE value ="local">
						<DESC>This partition is used automatically if the model is not a sync model.</DESC>
					</VALUE>
                    <VALUE value ="user">
                        <DESC>This partition is used automatically if the model is a sync model.</DESC>
                    </VALUE>
					<VALUE value ="app">
                        <DESC>This partition is used to store the application related information.</DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>
            <PROPERTY name="source_id" type="INTEGER" usePropertyBag="accessorsViaPropertyBag" >
                <DESC>Returns model's source_id.</DESC>
            </PROPERTY>
            <PROPERTY name="fixed_schema" type="BOOLEAN" usePropertyBag="accessorsViaPropertyBag">
                <DESC>Returns true if the model's type is of fixed schema.</DESC>
            </PROPERTY>
            <PROPERTY name="freezed" type="BOOLEAN" usePropertyBag="accessorsViaPropertyBag">
                <DESC>Returns true if the model is frozen.</DESC>
            </PROPERTY>
            <PROPERTY name="associations" type="STRING" usePropertyBag="accessorsViaPropertyBag">
                <DESC>Returns model's associations.</DESC>
            </PROPERTY>
        </PROPERTIES>

        <METHODS>
            <METHOD name="enumerate" access="STATIC">
                <RETURN type="ARRAY">
                    <DESC>Array of NewORMModel objects.</DESC>
                    <PARAM type="SELF_INSTANCE"/>
                </RETURN>
            </METHOD>
            <METHOD name="getModel" access="STATIC">
                <PARAMS>
                    <PARAM name="modelName" type="STRING">
                        <DESC>Name of the model you want returned.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING">
                    <DESC>NewORMModel object.</DESC>
                    <PARAM type="SELF_INSTANCE"/>
                </RETURN>
            </METHOD>

            <METHOD name="init" constructor="true">
                <DESC>Initializes new model's instance.</DESC>
                <PARAMS>
                    <PARAM name="modelName" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="initModel">
                <DESC>Initializes model's internal DB.</DESC>
            </METHOD>

            <METHOD name="setBelongsTo">
                <DESC>Adds 'belongs_to' relationship for the model. As belongs_to method doesn't work in NewORM, Using this method the relationship can be established.</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING"/>
                    <PARAM name="sourceName" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="getBelongsTo">
                <DESC>Returns info about model's relationships with other models.</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING"/>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="set">
                <DESC>Sets model's property to value with additional processing for :sync property.</DESC>
				<CAN_BE_NIL>
                </CAN_BE_NIL>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
						<PARAMS>
							<PARAM name="partition" type="STRING">
                                <DESC>The partition to use for this model. Partitions can be used to segment the data and keep non-synched data separate from synched models.</DESC>
								<VALUES>
                                    <VALUE value ="local">
                                        <DESC>This partition is used automatically if the model is not a sync model.</DESC>
                                    </VALUE>
                                    <VALUE value ="user">
                                        <DESC>This partition is used automatically if the model is a sync model.</DESC>
                                    </VALUE>
									<VALUE value ="app">
                                        <DESC>This partition is used to store the application related information.</DESC>
                                    </VALUE>
                                </VALUES>
                            </PARAM>
							<PARAM name="sync_type" type="STRING">
                                <DESC>Sets the type of sync it will be. </DESC>
                                <VALUES>
                                    <VALUE value ="none">
										<DESC>If data model is not a sync model.</DESC>
                                    </VALUE>
                                    <VALUE value ="incremental">
                                        <DESC>Used when the data model is a sync model. Just syncs changes.</DESC>
									</VALUE>
									<VALUE value ="bulk_only">
                                        <DESC>If the model is used only for bulk sync.</DESC>
                                    </VALUE>
                                </VALUES>
                            </PARAM>
							<PARAM name="sync_priority" type="INTEGER">
                                <DESC>This number determines the order in which the models are processed and synchronised. Priority starts from lower value 1. Lower the number, higher is the priority. Default value is 1000. </DESC>
                            </PARAM>
							<PARAM name="freezed" type="BOOLEAN">
                                <DESC>To make the model Freezed.</DESC>
                            </PARAM>
							<PARAM name="schema_version" type="FLOAT">
                                <DESC>This is used for data migration of the application.</DESC>
                            </PARAM>
						</PARAMS>
					</PARAM>
					<PARAM name="propertyValue" type="STRING">
						<DESC>The property names takes the corresponding property values, as mentioned above .</DESC>
					</PARAM>
                </PARAMS>
            </METHOD>
			

            <METHOD name="enable">
                <DESC>Sets model's Boolean property to true (enables model's property)</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
					<VALUES>
						<VALUE value = "fixed_schema">
							<DESC>To set the type of model as Fixed_schema.</DESC>
						</VALUE>
						<VALUE value = "loaded">
							<DESC>To load the model.</DESC>
						</VALUE>
						<VALUE value = "sync">
							<DESC>To make the model as user model.</DESC>
						</VALUE>
						<VALUE value = "full_update">
							<DESC>To send all the attributes(changed/unchanged) to Rhoconnect when an object is updated.</DESC>
						</VALUE>
						<VALUE value = "pass_through">
							<DESC>To keep the sensitive data out of redis server.</DESC>
						</VALUE>
					</VALUES>
					</PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="setModelProperty">
                <DESC>Initializes new model's field property.</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
						<DESC>The name of the property.</DESC>
                    </PARAM>
                    <PARAM name="propertyType" type="STRING">
						<DESC>The type of property. Possible values are: String, Float, integer, Boolean, Varchar, Blob. String is default.</DESC>
                    </PARAM>
                    <PARAM name="propOption" type="STRING" default="Null">
                        <CAN_BE_NIL/>
                        	<VALUES>
						<VALUE value ="overwrite">
							<DESC>Overwrite client copy of blob with the new copy from server. This is useful when RhoConnect modifies images sent from Rhodes, for example zooming or cropping.</DESC>
						</VALUE>
				</VALUES>		
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="getModelProperty">
                <DESC>Returns info about model's field property.</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
						<DESC>The name of the property.</DESC>
					</PARAM>	
                </PARAMS>
                <RETURN type="HASH">
					<DESC>Returns property name,type and option in the form of an HASH.</DESC>
				</RETURN>	
            </METHOD>

            <METHOD name="setSchemaIndex">
                <DESC>Initializes new model's schema index.</DESC>
                <PARAMS>
                    <PARAM name="indexName" type="STRING">
						<DESC>To define a named index on a set of attributes.</DESC>
					</PARAM>	
                    <PARAM name="indexCols" type="ARRAY">
						<DESC>A set of attributes which need a indexName are passed through this array.</DESC>
					</PARAM>
                    <PARAM name="is_unique" type="BOOLEAN">
						<DESC>To make the indexCols as unique column is_unique is set to true. This will prevent inserting duplicate records.</DESC>
					</PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="destroy" destructor="true">
                <DESC>Destroys model's instance.</DESC>
            </METHOD>

            <METHOD name="createObject">
                <DESC>Initializes model's object and stores it in the DB.</DESC>
                <PARAMS>
                    <PARAM name="attrs" type="HASH">
						<DESC>The attribute names and its respective values are passed as a key-value pair through this HASH.</DESC>
					</PARAM>	
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="createInstance">
                <DESC>Creates model's instance and initializes model's object but doesn't store it in DB.</DESC>
                <PARAMS>
                    <PARAM name="attrs" type="HASH">
						<DESC>The attribute names and its respective values are passed as a key-value pair through this HASH.</DESC>
					</PARAM>
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="anyChangedObjects">
					<DESC>Checks whether the model has any changed objects.</DESC>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="hasChanges">
                <DESC>Checks whether the object has any changes. Returns true when an object is created or updated.</DESC>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                </PARAMS>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="canModify">
                <DESC>Checks whether the object can be modified.</DESC>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                </PARAMS>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="updateObject">
                <DESC>Updates object's attributes in the DB.</DESC>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                    <PARAM name="oldAttrs" type="HASH"/>
                    <PARAM name="newAttrs" type="HASH"/>
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="saveObject">
                <DESC>Saves (creates if necessary or updates if already exists) object's attributes in the DB.</DESC>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                    <PARAM name="attrs" type="HASH"/>
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="deleteObject">
                <DESC>Deletes object's attributes from the DB.</DESC>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="deleteObjects">
                <DESC>Deletes all object's according to the specified conditions.It is applicable only for Fixed_schema Model.</DESC>
                <PARAMS>
                    <PARAM name="strOptions" type="HASH">
						<DESC>This HASH takes only one key-value pair for which the key is `conditions` and the value is the attribute name. For multiple attribute names, OR/AND/IN operator is used.</DESC> 
                    </PARAM>
					<PARAM name="quests" type="ARRAY">
						<DESC>This Array takes the values as String for the attribute names passed in the "strOptions" parameter.</DESC>
					</PARAM>	
                </PARAMS>
            </METHOD>

            <METHOD name="deleteObjectsPropertyBagByCondHash">
                <DESC>Deletes all objects for the given Property Bag model according to the specified conditions. It is applicable only for Property bag Model.</DESC>
                <PARAMS>
                    <PARAM name="conditions" type="HASH">
						<DESC>The attribute names and its respective values are passed as a key-value pair in this HASH.</DESC>
           			</PARAM>	
					<PARAM name="strOptions" type="HASH">
						<DESC>This HASH is passed as an empty HASH.</DESC>
					</PARAM>	
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="deleteObjectsPropertyBagByCondArray">
                <DESC>Deletes all objects for the given Property Bag model according to the specified conditions. It is applicable only for Property bag Model.</DESC>
                <PARAMS>
                    <PARAM name="conditions" type="STRING">
						<DESC>The attribute names are passed as a string.</DESC>
					</PARAM>
                    <PARAM name="quests" type="ARRAY">
						<DESC>This Array takes the values as String for the attribute names passed in the "conditions" parameter.</DESC>
					</PARAM>
                    <PARAM name="strOptions" type="HASH">
						<DESC>This HASH is passed as an empty HASH.</DESC>
					</PARAM>
					<PARAM name="attribNamesUsedInCond" type="ARRAY">
						<DESC>This Array takes the attribute names as string. Note: You must include the column name which is there in condition string and others.</DESC>
					</PARAM>
				</PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="getCount">
                <DESC>Returns total number of objects for the model.</DESC>
                <RETURN type="INTEGER"/>
            </METHOD>

            <METHOD name="getBackendRefreshTime">
                <DESC>Returns time string when the source has been synced.</DESC>
                <RETURN type="STRING"/>
            </METHOD>

            <METHOD name="findObjects">
                <DESC>Returns array of objects for the given model queried according to the specified conditions. It is applicable only for Fixed_schema Model.</DESC>
                <PARAMS>
                    <PARAM name="whatParam" type="STRING">
						<DESC>It defines the type of find operation to be performed.</DESC>
						<VALUES>
							<VALUE value = "all">
								<DESC>Finds all Objects matching the 'conditions' for a specific Model.</DESC>
							</VALUE>	
							<VALUE value = "count">
								<DESC>Returns the number of Objects matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
							<VALUE value = "first">
								<DESC>Returns the first Object matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
						</VALUES>	
					</PARAM>					
                    <PARAM name="strOptions" type="HASH">
						<DESC>This HASH takes only three key-value pairs for which the first key is `conditions` and the value is the attribute name. For multiple attribute names, OR/AND/IN operator is used. The second key is `offset` and the value is an integer which indicates the number of records to skip before returning. The third key is `per_page` and the value is an integer which specifies number of records to be returned.</DESC> 
                    </PARAM>
					<PARAM name="quests" type="ARRAY">
						<DESC>This Array takes the values as String for the attribute names passed in the "strOptions" parameter.</DESC>
					</PARAM>
					<PARAM name="selectAttrs" type="ARRAY">
						<DESC>This Array takes the attribute names as string.Useful if the model has many attributes and your query only needs a few of them.</DESC>
                    </PARAM>
					<PARAM name="orderAttrs" type="ARRAY">
						<DESC>This Array is formed using attribute name followed by Order direction for that attribute. Order direction: 'ASC' ascending, 'DESC' descending. Default = 'ASC'.</DESC>
					</PARAM>
				</PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="findObjectsPropertyBagByCondHash">
                <DESC>Returns array of objects for the given Property Bag model queried according to the specified conditions. It is applicable only for Property bag Model.</DESC>
                <PARAMS>
                    <PARAM name="whatParam" type="STRING">
						<DESC>It defines the type of find operation to be performed.</DESC>
						<VALUES>
							<VALUE value = "all">
								<DESC>Finds all Objects matching the 'conditions' for a specific Model.</DESC>
							</VALUE>	
							<VALUE value = "count">
								<DESC>Returns the number of Objects matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
							<VALUE value = "first">
								<DESC>Returns the first Object matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
						</VALUES>
					</PARAM>	
                    <PARAM name="conditions" type="HASH">
						<DESC>The attribute names and its respective values are passed as a key-value pair in this HASH.</DESC>
					</PARAM>	
                    <PARAM name="strOptions" type="HASH">
						<DESC>This HASH is passed as an empty HASH.</DESC>
					</PARAM>
                    <PARAM name="selectAttrs" type="ARRAY">
						<DESC>This Array takes the attribute names as string. Note: You must include the column name which is there in condition string and others.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="findObjectsPropertyBagByCondArray">
                <DESC>Returns array of objects for the given Property Bag model queried according to the specified conditions. It is applicable only for Property bag Model.</DESC>
                <PARAMS>
                    <PARAM name="whatParam" type="STRING">
						<DESC>It defines the type of find operation to be performed.</DESC>
						<VALUES>
							<VALUE value = "all">
								<DESC>Finds all Objects matching the 'conditions' for a specific Model.</DESC>
							</VALUE>	
							<VALUE value = "count">
								<DESC>Returns the number of Objects matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
							<VALUE value = "first">
								<DESC>Returns the first Object matching the 'conditions' in a specific Model.</DESC>
							</VALUE>
						</VALUES>
					</PARAM>	
                    <PARAM name="conditions" type="STRING">
						<DESC>The attribute names are passed as a string.</DESC>
					</PARAM>
                    <PARAM name="quests" type="ARRAY">
						<DESC>This Array takes the values as String for the attribute names passed in the "conditions" parameter.</DESC>
					</PARAM>
                    <PARAM name="strOptions" type="HASH">
						<DESC>This HASH is passed as an empty HASH.</DESC>
					</PARAM>
                    <PARAM name="selectAttrs" type="ARRAY">
						<DESC>This Array takes the attribute names as string. Note: You must include the column name which is there in condition string and others.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="find_by_sql">
                <DESC>Returns array of objects for the given model queried according to the specified SQL.</DESC>
                <PARAMS>
                    <PARAM name="sqlQuery" type="STRING"/>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="validateFreezedAttribute" generateDoc = "false">
                <DESC>Validates object's frozen attribute.</DESC>
                <PARAMS>
                    <PARAM name="attrName" type="STRING"/>
                </PARAMS>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="validateFreezedAttributes" generateDoc = "false">
                <DESC>Validates all object's frozen attributes.</DESC>
                <PARAMS>
                    <PARAM name="attrHash" type="HASH"/>
                </PARAMS>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="buildComplexWhereCond" generateDoc = "false">
                <DESC>Aux function.</DESC>
                <PARAMS>
                    <PARAM name="attrKey" type="STRING"/>
                    <PARAM name="attrValues" type="ARRAY"/>
                    <PARAM name="valOp" type="STRING"/>
                    <PARAM name="valFunc" type="STRING"/>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="buildFindLimits" generateDoc = "false">
                <DESC>Aux function.</DESC>
                <PARAMS>
                    <PARAM name="whatArg" type="STRING"/>
                    <PARAM name="hashArgs" type="HASH"/>
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="buildFindOrder" generateDoc = "false">
                <DESC>Aux function.</DESC>
                <PARAMS>
                    <PARAM name="order_attrs" type="ARRAY"/>
                    <PARAM name="order_ops" type="ARRAY"/>
                </PARAMS>
                <RETURN type="HASH"/>
            </METHOD>

            <METHOD name="buildSimpleWhereCond" generateDoc = "false">
                <DESC>Aux function.</DESC>
                <PARAMS>
                    <PARAM name="what" type="STRING"/>
                    <PARAM name="conditions" type="ARRAY"/>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="clear" access="STATIC">
                <DESC>Very, very dangerous method - only to be used in specs!!!</DESC>
            </METHOD>

            <METHOD name="onSyncDeleteError">
                <DESC>Handles sync delete errors for the object.</DESC>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                    <PARAM name="attrHash" type="HASH"/>
                    <PARAM name="action" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="onSyncUpdateError">
                <DESC>Handles sync update errors for the object.</DESC>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="objId" type="STRING"/>
                    <PARAM name="attrHash" type="HASH"/>
                    <PARAM name="rollbackHash" type="HASH"/>
                    <PARAM name="action" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="onSyncCreateError">
                <DESC>Handles sync create errors.</DESC>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="objects" type="ARRAY"/>
                    <PARAM name="action" type="STRING"/>
                </PARAMS>
            </METHOD>

            <METHOD name="pushChanges">
                <DESC>Pushes all changes for the source.</DESC>
            </METHOD>

            <ALIASES>
                <ALIAS new="count" existing="getCount"/>
                <ALIAS new="backend_refresh_time" existing="getBackendRefreshTime"/>
            </ALIASES>
        </METHODS>

        <USER_OVERVIEW>
			<!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
			<![CDATA[]]>
        </USER_OVERVIEW>

        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
		 
		 <EXAMPLES>
            <EXAMPLE title="deleteObjects">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method deleteObjects for deleting multiple Objects matching the conditions using OR operator in a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = empObj.deleteObjects({"conditions": "Name = ? OR Department = ?"},['Mathew','Sales']); ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
empObj.deleteObjects({:conditions=> "Name = ? OR Department = ?"},['Mathew','Sales']) ]]>			
							</RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Use method deleteObjects for deleting multiple Objects matching the conditions using IN operator in a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var emobj = empObj.deleteObjects({"conditions": "Name IN (?)"},['Mathew','Morris','Chris']);  ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
empObj.deleteObjects({:conditions=> "Name IN (?)"},['Mathew','Morris','Chris'])  ]]>			
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="findObjects">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method findObjects for finding the Objects matching the conditions using OR/AND operator in a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = empObj.findObjects("all",{"conditions": "Name = ? OR Department = ?","offset":20,"per_page":15},['James','Production'],['Name','Salary','Department'],['Name','ASC','Salary','DESC']); ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
res = empObj.findObjects("all",{:conditions => "Name = ? OR Department = ?",:offset => 20,:per_page => 15},['James','Production'],['Name','Salary','Department'],['Name','ASC','Salary','DESC']) ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Use method findObjects for finding the number of Objects matching the conditions using OR/AND operator in a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = empObj.findObjects("count",{"conditions": "Name = ? OR Department = ?","offset":15,"per_page":10},['Fred','Supply'],['Name','Salary','Department'],['Name','ASC','Salary','DESC']);  ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
res = empObj.findObjects("count",{:conditions => "Name = ? OR Department = ?",:offset => 15,:per_page => 10},['Fred','Supply'],['Name','Salary','Department'],['Name','ASC','Salary','DESC'])  ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="find_by_sql">
                <SECTIONS>
                    <SECTION>
                        <DESC>Finding the objects of a specific model using SQL query statements. It is applicable only for Fixed Schema model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var stdobjData = stdObj.find_by_sql("SELECT * FROM Student WHERE department = 'Mechanical'");  ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
result = stdObj.find_by_sql("SELECT * FROM Student WHERE department = 'Electronics'")  ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="createObject">
                <SECTIONS>
                    <SECTION>
                        <DESC>To create a model's object including initialization.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var objData = CustObj.createObject({"name":"Craig", "age":"20"}); ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
objData = CustObj.createObject({:name=>"Craig", :age=>"20"}) ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="deleteObjectsPropertyBagByCondHash">
                <SECTIONS>
                    <SECTION>
                        <DESC>To delete multiple objects by constructing an HASH of attribute and it's value.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var custobjData = CustObj.deleteObjectsPropertyBagByCondHash({"name":"John", "age":"20"},{}); ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
CustObj.deleteObjectsPropertyBagByCondHash({({:name=>"John", :age=>"20"},{}) ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="setSchemaIndex">
                <SECTIONS>
                    <SECTION>
                        <DESC>To set an index name to a set of attributes and indicating whether it is unique or not.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
model.setSchemaIndex("p1", ["name","price"], false); ]]>
                            </JAVASCRIPT>
							<RUBY>
				 <![CDATA[
model.setSchemaIndex("p1", ["name","price"], false) ]]>			
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>	
			<EXAMPLE title="findObjectsPropertyBagByCondHash">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method findObjectsPropertyBagByCondHash for finding the Objects matching the conditions given in the HASH for a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = empObj.findObjectsPropertyBagByCondHash("all",{"name":"John", "age":"20"},{},['name','age','salary']); ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
empobjData = empObj.findObjectsPropertyBagByCondHash("all",{:name=>"John", :age=>"20"},{},['name','age','salary']) ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="findObjectsPropertyBagByCondArray">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method findObjectsPropertyBagByCondArray for finding the Objects matching the conditions given in the array for a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = employee.findObjectsPropertyBagByCondArray("all","name = ? OR age = ?",['Ken','34'],{},['name','age']);
 ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
empobjData = employee.findObjectsPropertyBagByCondArray("all","name = ? OR age = ?",['Ken','34'],{},['name','age'])
 ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="deleteObjectsPropertyBagByCondArray">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method deleteObjectsPropertyBagByCondArray for deleting the Objects matching the conditions given in the array for a specific Model.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var empobjData = employee.deleteObjectsPropertyBagByCondArray("name = ? OR age = ?",['George','26'],{},['name','age']});
 ]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
empobjData = employee.deleteObjectsPropertyBagByCondArray("name = ? OR age = ?",['George','26'],{},['name','age']})
 ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
			<EXAMPLE title="setBelongsTo">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method setBelongsTo for establishing a relationship with the other model. It also prioritizes the synchronization of models based on the relationship established in the setBelongsTo method.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var prdobjData = model.setBelongsTo("itemName", "Product");]]>
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
prdobjData = model.setBelongsTo("itemName", "Product") ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
            <EXAMPLE title="updateObject">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method updateObject for updating the attributes of an object.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var objData = CustObj.createObject({"name":"Chris", "age": 30, "height":170.5});
CustObj.updateObject(objData.object,{"name":"Chris", "age": 30, "height":170.5}, {"name":"Samuel", "age":40, "height":180.5}); // "objData.object contains the object_Id" ]]> 
                            </JAVASCRIPT>
							<RUBY>
				<![CDATA[
customer.createObject({:name=>"Chris", :age=>30, :height=>170.5})
customer.createObject({:name=>"Tom", :age=>37, :height=>158.5})
data = customer.findObjectsPropertyBagByCondHash("all",{:name => "Chris"},{},[])
new_name = "Galvin"
customer.updateObject(data[0]['object'], data[0], {:name => "#{new_name}"}) #objData.object contains the object_Id
 ]]>
							</RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
		</EXAMPLES>	
    </MODULE>
</API>
