<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="WebView" parent="Rho" generateUnderscoreRubyNames="true">
        <HELP_OVERVIEW>The `Webview` is the core container used for rendering your application code. You can control certain behaviors of the webview by using this API class.</HELP_OVERVIEW>
        <HELP_OVERVIEW_EB>The `Webview` is the core container used for rendering your application code. You can control certain behaviors of the webview by using this API class.

> Note: There is currently an issue with hyperlinks on CE devices using the IE Engine: if you are attempting to click a link while holding the shift hardware key on the device, the link will not work properly. This is a known issue and is being worked on currently.
        </HELP_OVERVIEW_EB>

        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby.
        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Webview API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Webview API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.webview.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.
        </MORE_HELP_EB>

        <ALIASES>
            <ALIAS new="WebView" deprecated="true"/>
        </ALIASES>

        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES access="STATIC">
            <DESC></DESC>
            <ALIASES>
            </ALIASES>
            <PROPERTY name="framework" type="STRING" readOnly="true">
                <DESC>Same as System.webViewFramework.</DESC>
            </PROPERTY>
            <PROPERTY name="fullScreen" type="BOOLEAN" default="false">
                <DESC>Use full screen mode.</DESC>
                <PLATFORM>WM, CE, Win32, Android</PLATFORM>
            </PROPERTY>
            <PROPERTY name="enableZoom" type="BOOLEAN" default="true" readOnly="true">
                <DESC>Enable WebView zoom. Use 'enable_screen_zoom' parameter in rhoconfig.txt to configure this value.</DESC>
                <DESC_EB>Enable WebView zoom. Use 'EnableZoom' parameter in Config.xml to configure this value.</DESC_EB>
                <PLATFORM>Android</PLATFORM>
            </PROPERTY>
            <PROPERTY name="enablePageLoadingIndication" type="BOOLEAN" default="true" readOnly="true" productException="eb">
                <DESC>Show page loading indication. On Windows Mobile/CE this property can be set only in config.xml: GUI\\HourglassEnabled. At Android  use 'disable_loading_indication' parameter in rhoconfig.txt to configure this value.</DESC>
                <DESC_EB>Show page loading indication. On Windows Mobile/CE this property can be set only in config.xml: GUI\\HourglassEnabled. At Android  use 'disable_loading_indication' parameter in Config.xml to configure this value.</DESC_EB>
                <PLATFORM>WM, CE, Android</PLATFORM>
                <APPLIES>WebKit on Windows Mobile/CE</APPLIES>
            </PROPERTY>
            <PROPERTY name="enableWebPlugins" type="BOOLEAN" default="true" readOnly="true" productException="eb">
                <DESC>Enable / disable web plug-ins. Use 'enable_web_plugins' parameter in rhoconfig.txt to configure this value. This option only has effect on Android versions before 4.0 (ICS). It mainly affects if Flash content is displayed.</DESC>
                <DESC_EB>Enable / disable web plug-ins. Use 'enable_web_plugins' parameter in Config.xml to configure this value. This option only has effect on Android versions before 4.0 (ICS). It mainly affects if Flash content is displayed.</DESC_EB>
                <PLATFORM>Android</PLATFORM>
            </PROPERTY>
            <PROPERTY name="navigationTimeout" type="INTEGER" default="45000">
                <DESC>Can be defined in config.xml: Navigation\\NavTimeout. Number of milliseconds(maximum is 45000) before the browser times out and navigates to the page specified in the badlink setting. If it is determined that the destination is unreachable regardless of wait time, the badlink may be loaded before NAVTIMEOUT. This is the time taken to establish communication with the server, not the time taken to fully load the page.Note that the navigation timeout will not be invoked when navigating to the start page, best practice is to store your first page locally to avoid connectivity issues at start up, you can then redirect to an online page if desired.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>

            <PROPERTY name="scrollTechnique" type="STRING" default="FingerScroll" readOnly="true">
                <DESC>Specifies the technique used to scroll about the page.Defines in config.xml: Scrolling\\ScrollTechnique.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
                <VALUES>
                    <VALUE constName="SCROLL_NONE" value ="None">
                        <DESC>No scrollbars will be displayed and the page will not respond to finger swipes.</DESC>
                    </VALUE>
                    <VALUE constName="SCROLL_SCROLLBARS" value ="Scrollbars">
                        <DESC>When the size of the page is larger than the screen scrollbars will be presented which can be used to scroll the page.</DESC>
                    </VALUE>
                    <VALUE constName="SCROLL_FINGER" value ="FingerScroll">
                        <DESC>You can scroll around the page using finger swiping.</DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>
            <PROPERTY name="fontFamily" type="STRING" readOnly="true">
                <DESC>Specifies the default font to use when rendering text in web pages. The specified font should be a TrueType font present on the device. On Windows the default font has been set to 'Tahoma' as this is present on all Symbol WM / CE devices, note that Tahoma has no italic or oblique variants. On the Enterprise Tablet the default is Droid Sans Fallback. The font specified must be stored in \Windows for Windows WM / CE devices, or /system/fonts for Enterprise Tablet. Defines in config.xml: HTMLStyles\\FontFamily </DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="userAgent" type="STRING" readOnly="true">
                <DESC>Defines in config.xml: Navigation\\UserAgent. When visiting a web server the WebKit browser will report its self as the specified user agent. Use the following substitution variables:

* %p - platform name ("Windows CE " + version number)
* %w - WebKit version number
* %e - WebKit version number.

Use the UserAgent setting to spoof your device to the server, e.g. to view content designed for the desktop on your mobile screen.
From RhoElements 2.1 onwards the default value was changed to work out of the box with a greater number of server configurations, prior to RhoElements 2.1 the default user agent was: "Mozilla/5.0 (%p) AppleWebKit/%w (KHTML, like Gecko) WebKit/%e Safari/%w"
                </DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>

            <PROPERTY name="viewportEnabled" type="BOOLEAN" default="true" readOnly="true">
                <DESC>Whether to enable or disable viewport meta tag processing.Defines in config.xml: Navigation\\ViewportEnabled.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="viewportWidth" type="INTEGER" readOnly="true">
                <DESC>Default viewport width to use for pages that do not have a viewport meta tag (uses 1:1 scaling if not specified).Defines in config.xml: Navigation\\ViewportWidth.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="cacheSize" type="INTEGER" readOnly="true">
                <DESC>The browser cache size, in whole MBs. Defines in config.xml: Navigation\\Cache.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="enableCache" type="BOOLEAN" default="true" readOnly="true">
                <DESC>Enable / disable Browser cache. Use 'WebView.enableCache' parameter in rhoconfig.txt to configure this value.</DESC>
                <PLATFORM>Android</PLATFORM>
            </PROPERTY>
            <PROPERTY name="acceptLanguage" type="STRING" generateDoc="false">
                <DESC>Configurable HTTP headers. Not yet implemented.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="zoomPage" type="FLOAT">
                <DESC>Sets the zoom factor of the page. Factor 1.0 is no zoom, values less than 1.0 are zoomed out and values greater than 1.0 are zoomed in.It is recommended to not to use the zoom value less than 1.0 because the page doesn't look in readable format.In Android new Zoom value takes effect on current page, Previous page has to be revisited for the new zoom values to take effect </DESC>
                <PLATFORM>WM, Android</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="textZoomLevel" type="INTEGER">
                <DESC>Sets the font size to be displayed on the page, set to 0 for the smallest font and 4 for the largest font.</DESC>
                <PLATFORM>WM, Android</PLATFORM>
                <APPLIES>WebKit</APPLIES>
            </PROPERTY>
            <PROPERTY name="activeTab" type="INTEGER" readOnly="true">
                <DESC>Return an active tab index. For change active tab use Use Rho.NativeTabbar.currentTab property.</DESC>
            </PROPERTY>
        </PROPERTIES>

        <METHODS access="STATIC">
            <ALIASES>
                <ALIAS new="execute_js" existing="executeJavascript" deprecated="true"/>
                <ALIAS new="executeJavaScript" existing="executeJavascript"/>
                <ALIAS new="get_current_url" existing="currentURL" deprecated="true"/>
            </ALIASES>

            <METHOD name="refresh">
                <DESC>Force WebView to refresh the current page.</DESC>
                <PARAMS>
                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Refresh active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="navigate">
                <DESC>Force WebView to navigate to a URL. White page flickering during transition may happen if a controller action method doesn't return any rendered value, but instead performs a WebView.navigate(someUrl) call. It is important to avoid using WebView.navigate in Ruby action methods because WebView.navigate is intended to be used in callback methods asynchronously.</DESC>
                <PARAMS>
                    <PARAM name="url" type="STRING">
                        <DESC>Navigate to this url.</DESC>
                    </PARAM>

                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored. Please avoid of navigate in not opened tab - this is unsupported on Android.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Refresh active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="navigateBack">
                <DESC>Force WebView to navigate to the previous page using Browser back.</DESC>
                <PARAMS>
                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Navigate back in active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="currentLocation">
                <DESC>Returns the relative url (location) of the current page(without server and port); the last URL loaded to WebView from Ruby controller action.

If you open your page in WebView, and after it makes a few jumps by linking (for example, to outside web adresses for example), currentLocation will still return the initial url opened in WebView. Also, if you use JQMobile, current_location has the initial URL, but does not reflect the actual window.location containing the JQMobile additional address by adding #, etc. See currentUrl.</DESC>
                <APPLIES rubyOnly="true"/>

                <PARAMS>
                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.Tab should be loaded once to return current url.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Current location of active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING">
                </RETURN>
            </METHOD>

            <METHOD name="currentURL">
                <DESC>Returns the actual URL in WebView. This works the same as the JavaScript window.location.href.</DESC>
                <PLATFORM>iOS, Android</PLATFORM>
                <PLATFORM_EB>Android</PLATFORM_EB>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Current url of active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING">
                </RETURN>
            </METHOD>

            <METHOD name="executeJavascript">
                <DESC>Execute JavaScript on the current page from your controller.

For most mobile platforms, WebView.execute_js has been implemented via redirection to URL with 'javascript:' schema. If WebView.execute_js used in an AJAX call handler method in the controller, it may lead to the situation where the success javascript handler will never be executed. This may happen because, at the moment of success handler should be executed, a URL of the page already has been changed. This means no handlers from the previous page are valid.</DESC>
                <APPLIES rubyOnly="true"/>

                <PARAMS>
                    <PARAM name="javascriptText" type="STRING">
                        <DESC>The call to the JavaScript method on the current page, such as "test();".</DESC>
                    </PARAM>

                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Execute javascript in active WebView.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="active_tab" deprecated="true" productException="eb">
                <DESC>Use NativeTabbar.currentTab property: returns the current tab index.</DESC>
                <RETURN type="INTEGER">
                </RETURN>
            </METHOD>

            <METHOD name="full_screen_mode" deprecated="true" productException="eb">
                <DESC>Use WebView.fullScreen property: Switch to / from full screen mode.</DESC>
                <PARAMS>
                    <PARAM name="enable" type="BOOLEAN"/>
                </PARAMS>
            </METHOD>

            <METHOD name="setCookie">
                <DESC>When WebView loads the specified url (either by selecting link or from calling WebView.navigate), it will add this cookie to the HTTP request.Not implemented for WebKit.</DESC>
                <APPLIES rubyOnly="true"/>
                <PLATFORM>Android, Win32, iOS</PLATFORM>
                <PLATFORM_EB>Win32, Android</PLATFORM_EB>
                <PARAMS>
                    <PARAM name="url" type="STRING">
                        <DESC>Set a cookie to be used by WebView for this url.</DESC>
                    </PARAM>
                    <PARAM name="cookie" type="STRING">
                        <DESC>One or more name-value pairs of the format "NAME=VALUE". Separate multiple name-value pairs with a semicolon, such as "NAME1=VALUE1; NAME2=VALUE2".</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="save">
                <DESC>Save current page to file system.</DESC>
                <PLATFORM>Android</PLATFORM>
                <PARAMS>
                    <PARAM name="format" type="STRING">
                        <DESC>Format of the saved page.</DESC>
                        <VALUES>
                            <VALUE constName="SAVE_FORMAT_JPEG" value ="jpeg">
                                <DESC>Save as jpeg image.</DESC>
                            </VALUE>
                        </VALUES>
                    </PARAM>
                    <PARAM name="path" type="STRING">
                        <DESC>Path to the file / folder to save the page.</DESC>
                    </PARAM>

                    <PARAM name="tabIndex" type="INTEGER" default="-1">
                        <DESC>TabBar tab index. If no tab bar present, index is ignored.</DESC>
                        <CAN_BE_NIL>
                            <DESC>If tabbar index omitted then active WebView will be saved.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="set_menu_items" deprecated="true" generateAPI="false" productException="eb">
                <PLATFORM>WM, CE,Android</PLATFORM>
                <DESC>Use Application.nativeMenu property: set native menu items.</DESC>
                <PARAMS>
                    <PARAM name="menuItems" type="HASH">
                        <DESC>Map of menu items: name to action.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[]]>
        </USER_OVERVIEW>

        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
        <EXAMPLES>
            <EXAMPLE title="Execute javascript">
                <SECTIONS>
                    <SECTION>
                        <DESC>You can call the WebView and make it execute JavaScript code from a Ruby controller. This can be particularly helpful in order to reuse JavaScript functionality that is already included in your pages.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#call javascript alert on the current page
Rho::WebView.executeJavascript("alert('This is Webview.executejavascript function');")
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>As an example, you can invoke JQuery Mobile's changePage.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#call JQuery Mobile from a Ruby controller
Rho::WebView.executeJavascript("$.mobile.changePage('#my_page');")
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>You can also call your own functions.</DESC>
                        <CODE>
                            <JAVASCRIPT><![CDATA[
function greet(name) {
    alert("Hello, "+name);
}
]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>From the Ruby controller we can execute the JavaScript function that may be in the view.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#call a custom JavaScript function from Ruby
Rho::WebView.executeJavascript("greet('John Doe');")
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="Use full-screen mode">
                <SECTIONS>
                    <SECTION>
                        <DESC>The WebView can be set to use all the available screen real-estate by turning on "full-screen" mode.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
# Toggle fullScreen on / off
Rho::WebView.fullScreen = !Rho::WebView.fullScreen
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>This property can also be assigned to in JavaScript.</DESC>
                        <CODE>
                            <JAVASCRIPT><![CDATA[
// Fullscreen can also be invoked from JavaScript
Rho.WebView.fullScreen = true;

Rho.WebView.fullScreen = false;
]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="Navigate">
                <SECTIONS>
                    <SECTION>
                        <DESC>This is the section that will appear before the code block.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#Force WebView to navigate to a URL.
Rho::WebView.navigate(url_for(:action => :my_action))
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>You can also navigate outside of your application, to an external site.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#Navigate out of the local application and into an externally-served site
Rho::WebView.navigate("http://www.example.com");
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>This API is also available from JavaScript.</DESC>
                        <CODE>
                            <JAVASCRIPT><![CDATA[
//Navigate out of the local application and into an externally-served site
Rho.WebView.navigate("http://www.example.com");
]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="Navigate back">
                <SECTIONS>
                    <SECTION>
                        <DESC>This is the section that will appear before the code block.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
#Force WebView to navigate to the previous page using Browser back.
Rho::WebView.navigateBack
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>The same method is available in JavaScript.</DESC>
                        <CODE>
                            <JAVASCRIPT><![CDATA[
//Force WebView to navigate to the previous page using Browser back.
Rho.WebView.navigateBack();
]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="Refresh the page">
                <SECTIONS>
                    <SECTION>
                        <DESC>Reload the current URL into the WebView. This is useful especially after having updated data that must be now shown to the user </DESC>
                        <CODE>
                            <RUBY><![CDATA[
# Update database or variables here
# ...
# Refresh the current page to show new information
Rho::WebView.refresh
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>By default, "refresh" will update the current view. If you are using the native Tabbar and have multiple WebViews, you can specify which one to refresh.</DESC>
                        <CODE>
                            <RUBY><![CDATA[
# Reload the page on WebView number 2
Rho::WebView.refresh(2)
]]>
                            </RUBY>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Also available from JavaScript.</DESC>
                        <CODE>
                            <JAVASCRIPT><![CDATA[
// Reload the current page
Rho.WebView.refresh()

// Reload the page on WebView number 3
Rho.WebView.refresh(3)
]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
        </EXAMPLES>
    </MODULE>
</API>
