<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Camera" parent="Rho"  productException="eb">
        <HELP_OVERVIEW>The Camera API provides access to your device's Camera(s). Use this API to give users the ability to take a photo via one of the device's cameras and return it to the application. Photos can either be stored on the device and optionally transfered to an online server using the Network API or can be returned as a DataURI object for storing or display.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
In order to use this API you must include the following extension in your `build.yml`
    :::ruby
    extensions: ["mediacapture"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby

        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Camera API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Camera API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.camera.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.
        </MORE_HELP_EB>
        <PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
        <PLATFORM_EB>WM, Android</PLATFORM_EB>

        <ALIASES>
            <ALIAS new="Camera" deprecated="true"/>
        </ALIASES>
        <TEMPLATES>
            <!-- <SINGLETON_INSTANCES/>   produce enumerate() fabric method, all instances is singletones by ID, add ID property -->
            <DEFAULT_INSTANCE/> <!-- object has default static property, all methods can be call by static way (called from default instance), produce default(), set_default() methods -->
            <PROPERTY_BAG/> <!-- object has properties, produce getProps(), setProps() methods -->
        </TEMPLATES>
		<CONSTANTS>
		
		  <!-- Camera Types -->
    
			<CONSTANT name="CAMERA_TYPE_BACK" value="back" type="STRING">
				<DESC>Back camera. This is not supported in WM/CE devices.</DESC>
			</CONSTANT>
			<CONSTANT name="CAMERA_TYPE_FRONT" value="front" type="STRING">
				<DESC>Front camera. This is not supported in WM/CE devices.</DESC>
			</CONSTANT>
			 <CONSTANT name="CAMERA_TYPE_IMAGER" value="imager" type="STRING">
				<DESC>Camera is an imager. This is supported only in WM/CE devices.</DESC>
			</CONSTANT>
			 <CONSTANT name="CAMERA_TYPE_COLOR" value="color" type="STRING">
				<DESC>Camera is color camera. This is supported only in WM/CE devices.</DESC>
			</CONSTANT>
			 <!-- Camera Compression Format -->
			 <CONSTANT name="COMPRESSION_FORMAT_JPG" value="jpg" type="STRING">
				<DESC>JPG compression.</DESC>
			</CONSTANT>
			<CONSTANT name="COMPRESSION_FORMAT_PNG" value="png" type="STRING">
				<DESC>PNG compression.</DESC>
			</CONSTANT>
			 <!-- Camera Output Image Format -->
			<CONSTANT name="OUTPUT_FORMAT_IMAGE" value="image" type="STRING">
				<DESC>This shall provide the image uri. This can be used to display image directly on the page. An example is shown in the example section</DESC>
			</CONSTANT>
			<CONSTANT name="OUTPUT_FORMAT_DATAURI" value="dataUri" type="STRING">
				<DESC>This is a base 64 encoding of the image and can be used to easily embed the image on the page or store the image in a database. On some consumer devices, captured image will be rotated 90 degrees while displaying.</DESC>
			</CONSTANT>
			<CONSTANT name="OUTPUT_FORMAT_IMAGE_PATH" value="imagePath" type="STRING">
				<DESC>If this value used for setting the outputFormat property, the takePicture or capture API will return imageUri as the path to the saved image in the device. User can use this image path to transfer the file to an http server if required. An example is given to demonstrate, transferring a file to http server.This property is not applicable for Android and windows phone 8.</DESC>
			</CONSTANT>
			<!-- Camera Color Model -->
			<CONSTANT name="COLOR_MODEL_RGB" value="rgb" type="STRING">
				<DESC>A colour image is captured.</DESC>
			</CONSTANT>
			<CONSTANT name="COLOR_MODEL_GRAYSCALE" value="grayscale" type="STRING">
				<DESC>A grayscale image is captured.</DESC>
			</CONSTANT>
			
			<CONSTANT name="FLASH_ON" value="on" type="STRING">
				<DESC>Flash will be used.</DESC>
			</CONSTANT>
			<CONSTANT name="FLASH_OFF" value="off" type="STRING">
				<DESC>Flash will not be used.</DESC>
			</CONSTANT>
			<CONSTANT name="FLASH_AUTO" value="auto" type="STRING">
				<DESC>Flash will be used if lighting conditions deem it necessary. This is not supported in WM/CE devices.</DESC>
			</CONSTANT>
			<CONSTANT name="FLASH_RED_EYE" value="redEye" type="STRING">
				<DESC>Flash with red eye reduction is used. This is supported only in Android devices.</DESC>
			</CONSTANT>
			<CONSTANT name="FLASH_TORCH" value="torch" type="STRING">
				<DESC>The flash is turned on in torch mode. This is supported only in Android devices.</DESC>
			</CONSTANT>
			<!-- Camera Imager AIM Types -->
			<CONSTANT name="AIM_ON" value="on" type="STRING">
				 <DESC>Switches the imager's aim to ON </DESC>
			</CONSTANT>
			<CONSTANT name="AIM_OFF" value="off" type="STRING">
				<DESC>Switches the imager's aim to OFF </DESC>
			</CONSTANT>
        </CONSTANTS>
        <PROPERTIES usePropertyBag="accessorsViaPropertyBag" generateAccessors="true" >
            <DESC>These properties are used to configure the Camera.</DESC>
            <ALIASES>
                <ALIAS new="format" existing="compressionFormat" deprecated="true"/>
                <ALIAS new="desired_height" existing="desiredHeight" deprecated="true"/>
                <ALIAS new="desired_width" existing="desiredWidth" deprecated="true"/>
                <ALIAS new="color_model" existing="colorModel" deprecated="true"/>
                <ALIAS new="enable_editing" existing="enableEditing" deprecated="true"/>
                <ALIAS new="flash_mode" existing="flashMode" deprecated="true"/>
                <ALIAS new="save_to_shared_gallery" existing="saveToDeviceGallery" deprecated="true"/>
                <ALIAS new="left" existing="previewLeft" deprecated="true"/>
                <ALIAS new="top" existing="previewTop" deprecated="true"/>
                <ALIAS new="camera_type" existing="cameraType" deprecated="true"/>
            </ALIASES>

            <PROPERTY name="cameraType" type="STRING" readOnly="true">
			    <PLATFORM>Android, iOS, WP8, WM, CE</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>This property is device specific. The value for this property can be either 'back' or 'front' in the case of Android/iOS/WP8 devices.In the case of WM/CE it could be either 'imager' or 'color'. WM/CE devices will use 'color'as default and if color camera not available the default value will be 'imager'. Android/iOS/WP8 devices will use 'back'as default and if back camera not available the default value will be 'front',
				This Property shall return one among the values mentioned in constant section which starts with CAMERA_TYPE_...
				</DESC>
                <DESC_EB>This property is device specific. The value for this property can be either 'back' or 'front' in the case of Android devices.In the case of windows it could be either 'imager' or 'color'. WM/CE devices will use 'color'as default and if color camera not available the default value will be 'imager'. Android devices will use 'back'as default and if back camera not available the default value will be 'front'.
				This Property shall return one among the values mentioned in constant section which starts with CAMERA_TYPE_...</DESC_EB>
               
            </PROPERTY>
            <PROPERTY name="maxWidth" type="INTEGER" generateAccessors="true" readOnly="true">
                <PLATFORM>Android, iOS, WP8, WM, CE</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>The maximum width of images which can be captured. This is measured in pixels. On WM/CE devices this is applicable only for color camera. Imager does not support this property.</DESC>
            </PROPERTY>
            <PROPERTY name="maxHeight" type="INTEGER" generateAccessors="true" readOnly="true">
                <PLATFORM>Android, iOS, WP8, WM, CE</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>The maximum height of images which can be captured. This is measured in pixels. On WM/CE devices this is applicable only for color camera. Imager does not support this property.</DESC>
            </PROPERTY>
            <PROPERTY name="supportedSizeList" type="ARRAY" readOnly="true" usePropertyBag="none" >
                <PARAM type="HASH">
                    <PARAMS>
                        <PARAM name="width" type="INTEGER"/>
                        <PARAM name="height" type="INTEGER"/>
                    </PARAMS>
                </PARAM>
                <PLATFORM>Android, WP8, WM, CE, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>List of resolutions (width and height in pixels) supported by the camera. On WM/CE devices this feature is supported only by color camera and it is not supported by imager. Refer example section for more details.</DESC>
            </PROPERTY>
            <PROPERTY name="desiredWidth" type="INTEGER">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
				<PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>Camera hardware is limited to taking photos in a finite number of resolutions, eg 2048x1536, 640x480 etc. Specifying a desiredWidth will request to take the photo with the specified width but if it is not supported by the hardware then the closest match will be selected. The callback received when a photo is taken contains the actual resolution of the captured photo.</DESC>
            </PROPERTY>
            <PROPERTY name="desiredHeight" type="INTEGER">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
				<PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>Camera hardware is limited to taking photos in a finite number of resolutions, eg 2048x1536, 640x480 etc. Specifying a desiredHeight will request to take the photo with the specified height but if it is not supported by the hardware then the closest match will be selected. The callback received when a photo is taken contains the actual resolution of the captured photo.</DESC>
            </PROPERTY>
            <PROPERTY name="fileName" type="STRING">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
				<PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>The image file path without file extension to store captured image in subsequent calls to takePicture() or capture(). Default filename will be IMG_timestamp and will be saved under root directory. The filename extension will be added automatically according to compressionFormat property value.
				In Wp8, only filename can be changed, by default the path shall be under picture=>CameraRoll</DESC>
            </PROPERTY>
            <PROPERTY name="compressionFormat" type="STRING" default="jpg">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <APPLIES>JPG is supported on all devices, Android, WP8 and Windows Mobile does not support PNG images</APPLIES>
                <PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>The format of the captured image in subsequent calls to takePicture(). If you do not define this property when you use choose_picture with iOS, the type of image in Gallery will be recognized, and the same format will be used for saving the image to applications data. In windows and WP8 devices the format will be always jpg type.
				This Property shall accept/return one among the values mentioned in constant section which starts with COMPRESSION_FORMAT_...
				</DESC>
                <DESC_EB>The format of the captured image in subsequent calls to takePicture(). On windows devices the format will be always .jpg type.
				This Property shall accept/return one among the values mentioned in constant section which starts with COMPRESSION_FORMAT_...
				</DESC_EB>
                
            </PROPERTY>
            <PROPERTY name="outputFormat" type="STRING" default="imagePath">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
				<PLATFORM>Android, iOS, WM, CE, WP8</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>Specifies the way to return the captured image to the application.
				This Property shall accept/return one among the values mentioned in constant section which starts with OUTPUT_FORMAT_...</DESC>
				<DESC_EB>Specifies the way to return the captured image to the application.
				This Property shall accept/return one among the values mentioned in constant section which starts with OUTPUT_FORMAT_...
				</DESC_EB>
                
            </PROPERTY>
            <PROPERTY name="colorModel" type="STRING" default="rgb">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
                <PLATFORM>Android, iOS</PLATFORM>
                <PLATFORM_EB>Android</PLATFORM_EB>
                <DESC>Where supported by the hardware this property can be used to select whether to capture a color or a grayscale image.
				This Property shall accept/return one among the values mentioned in constant section which starts with COLOR_MODEL_...</DESC>
				<DESC_EB>Where supported by the hardware this property can be used to select whether to capture a color or a grayscale image.
				This Property shall accept/return one among the values mentioned in constant section which starts with COLOR_MODEL_...
				</DESC_EB>
                
            </PROPERTY>
            <PROPERTY name="enableEditing" type="BOOLEAN" default="true" productException="eb">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
                <PLATFORM>iOS</PLATFORM>
                <DESC>Enables post photo capture image customizing; image will captured reduced to screen size (not full size of camera sensor).</DESC>
            </PROPERTY>
            <PROPERTY name="flashMode" type="STRING">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
                <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                <DESC>Specifies the flash behavior when taking a picture.
				This Property shall accept/return one among the values mentioned in constant section which starts with FLASH_...</DESC>
				<DESC_EB>Specifies the flash behavior when taking a picture.
				This Property shall accept/return one among the values mentioned in constant section which starts with FLASH_...</DESC_EB>
               
            </PROPERTY>
            <PROPERTY name="saveToDeviceGallery" type="BOOLEAN" default="false">
                <VER_INTRODUCED>2.0.0</VER_INTRODUCED>
                <PLATFORM>iOS,Android</PLATFORM>
                <PLATFORM_EB>Android</PLATFORM_EB>
                <DESC>If true, the picture you take will be added to the device photo gallery.</DESC>
            </PROPERTY>
            <PROPERTY name="captureSound" type="STRING">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>Android, WM, CE</PLATFORM>
                <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                <DESC>Path to a sound file resident on the device which will be played when the image is captured.</DESC>
            </PROPERTY>
            <PROPERTY name="previewLeft" type="INTEGER">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>WM, CE</PLATFORM>
                <DESC>In cases where the resident camera application on the device is not used this API is used to control the position of the viewfinder preview window when taking a photo.</DESC>
            </PROPERTY>
            <PROPERTY name="previewTop" type="INTEGER">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>WM, CE</PLATFORM>
                <DESC>In cases where the resident camera application on the device is not used this API is used to control the position of the viewfinder preview window when taking a photo.</DESC>
            </PROPERTY>
            <PROPERTY name="previewWidth" type="INTEGER">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>WM, CE</PLATFORM>
                <DESC>In cases where the resident camera application on the device is not used this API is used to control the position of the viewfinder preview window when taking a photo.</DESC>
            </PROPERTY>
            <PROPERTY name="previewHeight" type="INTEGER">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>WM, CE</PLATFORM>
                <DESC>In cases where the resident camera application on the device is not used this API is used to control the position of the viewfinder preview window when taking a photo.</DESC>
            </PROPERTY>
            <PROPERTY name="useSystemViewfinder" type="BOOLEAN" default="false">
                <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
                <PLATFORM>Android</PLATFORM>
                <DESC>Setting the value of this property to "true", shall open the System ViewFinder with its properties. None of the Rho camera properties shall be applicable.</DESC>
            </PROPERTY>
			<PROPERTY name="aimMode" type="STRING">
                <PLATFORM>WM, CE</PLATFORM>
                <DESC>Specifies the aim behaviour when taking a picture. Applicable only for imager module.
				This Property shall accept/return one among the values mentioned in constant section which starts with AIM_...</DESC>
				<DESC_EB>Specifies the aim behaviour when taking a picture. Applicable only for imager module.
				This Property shall accept/return one among the values mentioned in constant section which starts with AIM_...</DESC_EB>
                
            </PROPERTY>
        </PROPERTIES>

        <METHODS>
            <ALIASES>
                <ALIAS new="save_image_to_device_gallery" existing="copyImageToDeviceGallery" deprecated="true"/>
            </ALIASES>

            <METHOD name="enumerate" access="STATIC" hasCallback="optional">
			    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                <DESC>Returns the cameras present on your device, allowing you to access your device's front or back camera.</DESC>
                <RETURN type="ARRAY">
                    <DESC>Array of objects.</DESC>
                    <PARAM name="cameraArray" type="SELF_INSTANCE"/>
                </RETURN>
            </METHOD>
            <METHOD name="getCameraByType" access="STATIC" hasCallback="optional">
			    <PLATFORM>Android, iOS, WP8, WM, CE</PLATFORM>
                <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                <DESC>Returns the camera of requested type if that camera exist - else return nil.</DESC>
                <PARAMS>
                    <PARAM name="cameraType" type="STRING">
                        <DESC>CameraType: 'back' or 'front' in the case of Android, iOS and WP8 and 'color' or 'imager' in the case of WM, CE devices</DESC>
                        <DESC_EB>CameraType: 'back' or 'front' in the case of Android and 'color' or 'imager' in the case of WM, CE devices</DESC_EB>
                    </PARAM>
                </PARAMS>
                <RETURN type="SELF_INSTANCE">
                    <DESC>Camera with requested type or nil if not requested type does not exist. Refer example section for more details.</DESC>
                </RETURN>
            </METHOD>
            <METHOD name="takePicture" hasCallback="mandatory" runInThread="ui">
			    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                <DESC>Start the camera application to take a picture. The user can capture the displayed image by interacting with the resident camera app. In Windows, this method always shows the preview in full screen and user can use the native button to capture the image.
				On wp8,wm when 'outputFormat' is 'image' then imageUri/image_uri shall have only Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image'
> Note: To display an image, it is recommended that you use the full path to the image instead of a relative path. To do this, you can use the [`expandDatabaseBlobFilePath`](Application#mexpandDatabaseBlobFilePath) method of the [Application module](Application) as such:

##### Ruby
    :::ruby
    Rho::RhoApplication.expandDatabaseBlobFilePath(x.image_uri)

##### JavaScript
    :::js
    Rho.RhoApplication.expandDatabaseBlobFilePath(x.image_uri)
                </DESC>
                <PARAMS>
                    <PARAM name="propertyMap" type="HASH" propertyHash="true">
                        <DESC>Provide a set of properties to configure the camera, for example to specify the flashMode or compressionFormat.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Not providing properties to this function will use the Camera's default properties, or those previously set on the Camera instance.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
                <CALLBACK type="HASH">
                    <PARAMS>
                        <PARAM name="status" type="STRING">
						     <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                             <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>Whether or not the image was successfully captured. The returned string will be one of 'ok', 'cancel' or 'error'.</DESC>
                        </PARAM>
                        <PARAM name="imageUri" type="STRING">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device.On wp8,wm when 'outputFormat' is 'image' then imageUri shall have only Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image', this image will have an auto-generated name. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri. If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http. </DESC>
							<DESC_EB>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http.</DESC_EB>
                        </PARAM>
                        <PARAM name="imageHeight" type="INTEGER">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>The actual height of the image that was captured, this may differ from the requested height as the Camera will only support a finite resolutions.</DESC>
                        </PARAM>
                        <PARAM name="imageWidth" type="INTEGER">
						     <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                             <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>The actual width of the image that was captured, this may differ from the requested width as the Camera will only support a finite resolutions.</DESC>
                        </PARAM>
                        <PARAM name="imageFormat" type="STRING">
						    <PLATFORM>Android, WM, CE, iOS</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>The format in which the image was captured, either 'png' or 'jpg'.</DESC>
                        </PARAM>
                        <PARAM name="message" type="STRING">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>If the returned status is 'error' then this field will contain more information on the error. To maintain backward compatibility WM and Android platforms provides message for cancel status as well.</DESC>
                        </PARAM>
                        <PARAM name="image_uri" type="STRING" deprecated="true">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device.On wp8,wm when 'outputFormat' is 'image' then imageUri shall have only Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image', this image will have an auto-generated name. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri. If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http. </DESC>
							<DESC_EB>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http.</DESC_EB>
                        </PARAM>
                        <PARAM name="image_height" type="INTEGER" deprecated="true">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>It is recommended to use imageHeight in preference to this parameter.</DESC>
                        </PARAM>
                        <PARAM name="image_width" type="INTEGER" deprecated="true">
						    <PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>It is recommended to use imageWidth in preference to this parameter.</DESC>
                        </PARAM>
                        <PARAM name="image_format" type="STRING" deprecated="true">
						    <PLATFORM>Android, WM, CE, iOS</PLATFORM>
                            <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>It is recommended to use imageFormat in preference to this parameter.</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>
			<METHOD name="showPreview" runInThread="ui">
				<DESC>Shows the preview in user configurable viewer window.</DESC>
				<PLATFORM>WM, CE</PLATFORM>
				<PLATFORM_EB>WM, CE</PLATFORM_EB>
        <PARAMS>
				<PARAM name="propertyMap" type="HASH" propertyHash="true">
                        <DESC>Provide a set of properties to configure the camera.</DESC>
                        <CAN_BE_NIL>
                            <DESC>Not providing properties to this function will use the Camera's default properties, or those previously set on the Camera instance.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
         </PARAMS>
			</METHOD>
			<METHOD name="hidePreview">
				<DESC>Hides the preview opened by using showPreview.</DESC>
				<PLATFORM>WM, CE</PLATFORM>
				<PLATFORM_EB>WM, CE</PLATFORM_EB>
			</METHOD>
			<METHOD name="capture" hasCallback="mandatory">
				<DESC>Capture the image and save it to a file.</DESC>
				<PLATFORM>WM, CE</PLATFORM>
				<PLATFORM_EB>WM, CE</PLATFORM_EB>
				<CALLBACK type="HASH">
                    <PARAMS>
                        <PARAM name="status" type="STRING">
                            <DESC>Whether or not the image was successfully captured. The returned string will be one of 'ok' or 'error'.</DESC>
                        </PARAM>
                        <PARAM name="imageUri" type="STRING">
                            <DESC>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri. If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http. </DESC>
							<DESC_EB>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http.</DESC_EB>
                        </PARAM>
                        <PARAM name="imageHeight" type="INTEGER">
                            <DESC>The actual height of the image that was captured, this may differ from the requested height as the Camera will only support a finite resolutions.</DESC>
                        </PARAM>
                        <PARAM name="imageWidth" type="INTEGER">
                            <DESC>The actual width of the image that was captured, this may differ from the requested width as the Camera will only support a finite resolutions.</DESC>
                        </PARAM>
                        <PARAM name="imageFormat" type="STRING">
                            <DESC>The format in which the image was captured, either 'png' or 'jpg'.</DESC>
                        </PARAM>
                        <PARAM name="message" type="STRING">
                            <DESC>If the returned status is 'error' then this field will contain more information on the error.</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
			</METHOD>
            <METHOD name="choosePicture" runInThread="module" hasCallback="mandatory" access="static">
                <DESC>Choose a picture from the album.</DESC>
                <PARAMS>
                    <PARAM name="propertyMap" type="HASH" propertyHash="true">
					     <PLATFORM>Android, WM, CE, WP8, iOS</PLATFORM>
                         <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                        <DESC>Provide a set of properties to configure an image, for example to specify the image size or color mode. In WM/CE,Android and WP8 devices user can only specify the outputFormat in the property bag. In iOS devices user can specify next options: compressionFormat, desiredWidth, desiredHeight, outputFormat, colorModel,  enableEditing.
							In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri.On wp8, wm when 'outputFormat' is 'image' then imageUri or image_uri shall have Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image'</DESC>
                        <DESC_EB>Provide a set of properties to configure an image, for example to specify the image size or color mode. In WM/CE,Android devices user can only specify the outputFormat in the property bag.</DESC_EB>
                        <CAN_BE_NIL>
                            <DESC>Not providing properties to this function will use the Camera's default properties, or those previously set on the Camera instance.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
                <CALLBACK type="HASH">
                    <PARAMS>
                        <PARAM name="status" type="STRING">
                            <DESC>Whether or not the image was successfully chosen from the gallery. The returned string will be one of 'ok', 'cancel' or 'error'.</DESC>
                        </PARAM>
                        <PARAM name="imageUri" type="STRING">
						<PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                        <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                            <DESC>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device.On wp8,wm when 'outputFormat' is 'image' then imageUri shall have only Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image', this image will have an auto-generated name. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri. If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http. </DESC>
							<DESC_EB>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http.</DESC_EB>
                        </PARAM>
                        <PARAM name="imageHeight" type="INTEGER">
                            <DESC>The height of the image.</DESC>
                        </PARAM>
                        <PARAM name="imageWidth" type="INTEGER">
                            <DESC>The width of the image.</DESC>
                        </PARAM>
                        <PARAM name="imageFormat" type="STRING">
                            <DESC>The format of the image, either 'png' or 'jpg'.</DESC>
                        </PARAM>
                        <PARAM name="message" type="STRING">
                            <DESC>If the returned status is 'error' then this field will contain more information on the error. To maintain backward compatibility WM and Android platforms provides message for cancel status as well.</DESC>
                        </PARAM>
                        <PARAM name="image_uri" type="STRING" deprecated="true">
						<PLATFORM>Android, WM, CE, iOS, WP8</PLATFORM>
                        <PLATFORM_EB>Android, WM, CE</PLATFORM_EB>
                           <DESC>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device.On wp8,wm when 'outputFormat' is 'image' then imageUri shall have only Image name with \ sign, on WP8 ImageName shall be suffixed by DTF when 'outputFormat' is 'image', this image will have an auto-generated name. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, In Wp8 dataUri shall provide the thumbnail for the picture taken, It is recommended to use Image over dataUri. If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http. </DESC>
						   <DESC_EB>If the specified 'outputFormat' was 'image' then this field is the URI to the taken image stored on the device. If the specified 'outputFormat' was 'dataUri' then this field will be the image encoded as a Data URI, If the specified 'outputFormat' was 'imagePath' then this field will have the image path on the device. User can use image path to transfer image over http.</DESC_EB>
                        </PARAM>
                        <PARAM name="image_height" type="INTEGER" deprecated="true">
                            <DESC>It is recommended to use imageHeight in preference to this parameter.</DESC>
                        </PARAM>
                        <PARAM name="image_width" type="INTEGER" deprecated="true">
                            <DESC>It is recommended to use imageWidth in preference to this parameter.</DESC>
                        </PARAM>
                        <PARAM name="image_format" type="STRING" deprecated="true">
                            <DESC>It is recommended to use imageFormat in preference to this parameter.</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>
            <METHOD name="copyImageToDeviceGallery" access="static">
                <PLATFORM>iOS, Android</PLATFORM>
                <PLATFORM_EB>Android</PLATFORM_EB>
                <DESC>Save an image to the device gallery.</DESC>
                <PARAMS>
                    <PARAM name="pathToImage" type="STRING">
                        <DESC>The real path to the image that is to be saved in the device gallery. You need to use the RhoApplication method `expandDatabaseBlobFilePath` to have the real path, such as `Rho::RhoApplication::expandDatabaseBlobFilePath(img.image_uri)`.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[]]>
        </USER_OVERVIEW>
        <VER_INTRODUCED>4.0.0</VER_INTRODUCED>
        <PLATFORM>
            <!--  This section is used for the supported platform images at the top -->
        </PLATFORM>
        <EXAMPLES>
           <EXAMPLE title="Take picture with default camera">
            <SECTIONS>
              <SECTION>
               <DESC>Take an image with as little code as possible, using all default values.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
def take_picture_with_default_camera
  # Capture an image from the default camera on the device, using the default image settings
  Rho::Camera.takePicture({}, :picture_taken_callback)
end

def picture_taken_callback
  # Did we really take a picture?
  if (@params["status"]=="ok")
    # If so, show it
    Rho::WebView.navigate(url_for(:action => :show_picture, :query => {:image => Rho::Application.expandDatabaseBlobFilePath(@params["imageUri"])}))
  else
    # Otherwise we are done here
    Rho::WebView.navigate(url_for(:action => :index))
  end
end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
function take_picture_with_default_camera() {
  // Capture an image from the default camera on the device, using the default image settings
  Rho.Camera.takePicture({}, picture_taken_callback);
}

function picture_taken_callback(params) {
  // Did we receive an image?
  if (params["status"]=="ok") {
    // Assuming we have an <img id="#captured_image"> tag, we will be able to see the image that was just captured
    $("#captured_image").attr("src", Rho.Application.expandDatabaseBlobFilePath(params["imageUri"]));
  }
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Choose which camera to use when taking images">
            <SECTIONS>
              <SECTION>
               <DESC>On devices with more than one camera, you can select which camera to use for taking pictures.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# controller.rb
def choose_camera
  $cameras = Rho::Camera.enumerate
  render
end

def take_picture_using_chosen_camera
  camera = $cameras[@params["cameraIndex"].to_i]
  camera.takePicture({}, url_for(:action => :picture_taken_callback))
end


# choose_camera.erb
<ul data-role="listview">
  <% $cameras.each_with_index do |camera, index| %>
    <li><a href="<%= url_for(:action => :take_picture_using_chosen_camera, :query => {:camera_index => index}) %>"><%= camera.cameraType %></li>
  <% end %>
</ul>
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
<div id="camera_list">
</div>


var cameras = [];

function choose_camera() {
  // get all available cameras
  cameras = Rho.Camera.enumerate();

  // build an HTML list
  var cameraList = "<ul>";

  for (var cameraIndex=0; cameraIndex<cameras.length; cameraIndex++) {
    var camera = cameras[cameraIndex];
    // Create a link for each camera with an onclick handler
    cameraList = cameraList +'<li><a href="#" class="take_picture_with_selected_camera" onclick="take_picture_with_camera('+cameraIndex+')">'+camera.cameraType+'</a></li>';
  }

  cameraList = cameraList+"</ul>";

  // make camera list visible to the user
  $("#camera_list").html(cameraList);
}

function take_picture_with_camera(cameraIndex) {
  var camera = cameras[cameraIndex];
  camera.takePicture({}, picture_taken_callback);
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Saving a picture to the device's gallery">
            <SECTIONS>
              <SECTION>
               <DESC>Apart from taking new pictures, you can also save images to the built-in gallery. In the following examples, the picture we are adding to the gallery is one that was just taken with the camera, but you can add any other image you can access by filename.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
def take_picture_and_save_it_to_gallery
  Rho::Camera.choosePicture({}, url_for(:action => :picture_taken_callback_save_to_gallery))
end

def picture_taken_callback_save_to_gallery
  # Did we really take a picture?
  if (@params["status"]=="ok")
    # If so, save it to the gallery
    Rho::Camera.copyImageToDeviceGallery(Rho::Application.expandDatabaseBlobFilePath(@params["imageUri"]))
  end

  Rho::WebView.navigate(url_for(:action => :index))

end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
function take_picture_and_save_it_to_gallery() {
  Rho.Camera.choosePicture({}, picture_taken_callback_save_to_gallery);
}

function picture_taken_callback_save_to_gallery(params) {
  if (params["status"]=="ok") {
    Rho.Camera.copyImageToDeviceGallery(Rho.Application.expandDatabaseBlobFilePath(params["imageUri"]));

    alert("Image saved to gallery");
  }
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Control image properties">
            <SECTIONS>
              <SECTION>
               <DESC>You can tweak multiple options to get an image exactly as you need it </DESC>
               <CODE>
                <RUBY>
           <![CDATA[
def control_image_properties
  # Instead of accepting the defaults, let's set some properties to our liking

  # We will ask for a PNG file...
  Rho::Camera.compressionFormat = "png"

  # ...a particular image size...
  Rho::Camera.desiredWidth = 1024
  Rho::Camera.desiredHeight = 768

  # ...and force the flash to be used
  Rho::Camera.flashMode = "on"

  # Now, take the picture
  Rho::Camera.takePicture({}, :picture_taken_callback)
end

def picture_taken_callback
  # Did we really take a picture?
  if (@params["status"]=="ok")
    # If so, show it
    Rho::WebView.navigate(url_for(:action => :show_picture, :query => {:image => Rho::Application.expandDatabaseBlobFilePath(@params["imageUri"])}))
  else
    # Otherwise we are done here
    Rho::WebView.navigate(url_for(:action => :index))
  end
end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
function control_image_properties() {
  // Instead of accepting the defaults, let's set some properties to our liking

  // We will ask for a PNG file...
  Rho.Camera.compressionFormat = "png";

  // ...a particular image size...
  Rho.Camera.desiredWidth = 1024;
  Rho.Camera.desiredHeight = 768;

  // ...and force the flash to be used
  Rho.Camera.flashMode = "on";

  // Now, take the picture
  Rho.Camera.takePicture({}, picture_taken_callback);
}

function picture_taken_callback(params) {
  // Did we receive an image?
  if (params["status"]=="ok") {
    // show it in our <img id="captured_image"> tag
    $("#captured_image").attr("src", Rho.Application.expandDatabaseBlobFilePath(params["imageUri"]));
  }

}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Determine camera capabilities">
            <SECTIONS>
              <SECTION>
               <DESC>You can get all available camera properties in a single call.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# controller.rb

def determine_camera_capabilities
  # Get all camera properties
  @properties = Rho::Camera.getAllProperties
  render
end

# determine_camera_capabilities.erb
    <ul data-role="listview">

    <% @properties.each_pair do |name,value| %>
      <li><%= name %> : <%= value %></li>
    <% end %>

    </ul>
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
function determine_camera_capabilities() {
  var capabilitiesList = "<ul>";

  // Get all capabilities of the camera...
  var capabilities = Rho.Camera.getAllProperties();

  // ... compose a nicely formatted list with their names and values ...
  for (var capability in capabilities) {
    capabilitiesList+="<li>"+capability+": "+capabilities[capability]+"</li>";
  }

  capabilitiesList += "</ul>";

  // ... and show it
  $("#camera_capabilities").html(capabilitiesList);
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Select picture from device gallery">
            <SECTIONS>
              <SECTION>
               <DESC>Apart from taking new pictures, the Camera API also lets you access existing images on the device's gallery.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
def select_picture_from_gallery
  Rho::Camera.choosePicture({}, url_for(:action => :picture_taken_callback))
end

def picture_taken_callback
  # Did we really take a picture?
  if (@params["status"]=="ok")
    # If so, show it
    Rho::WebView.navigate(url_for(:action => :show_picture, :query => {:image => Rho::Application.expandDatabaseBlobFilePath(@params["imageUri"])}))
  else
    # Otherwise we are done here
    Rho::WebView.navigate(url_for(:action => :index))
  end
end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
function select_picture_from_gallery() {
  Rho.Camera.choose_picture({}, picture_taken_callback);
}

function picture_taken_callback(params) {
  // Did we receive an image?
  if (params["status"]=="ok") {
    // Show it in an <img> tag
    $("#captured_image").attr("src", Rho.Application.expandDatabaseBlobFilePath(params["imageUri"]));
  }
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
          <EXAMPLE title="Getting a camera instance by cameraType">
            <SECTIONS>
              <SECTION>
                <DESC>Camera API also lets you access camera instance by cameraType.</DESC>
                <CODE>
                  <JAVASCRIPT>
                    <![CDATA[
//get the instance by cameraType and takePicture using that instance
function get_color_camera_instance() {
  var camInst = Rho.Camera.getCameraByType('color');
  camInst.takePicture({'outputFormat':'image'}, my_callback);
}

                   ]]>
                  </JAVASCRIPT>
                </CODE>
              </SECTION>
            </SECTIONS>
          </EXAMPLE>
          <EXAMPLE title="Getting the list of resolutions supported by the camera">
            <SECTIONS>
              <SECTION>
                <DESC>Camera resolution is hardware specific. Camera API supports getting the supported resolutions of a camera instance.</DESC>
                <CODE>
                  <JAVASCRIPT>
                    <![CDATA[
function getsupporteSizeList()
{
var instArray = Rho.Camera.enumerate();
var reslnArray = instArray[0].supportedSizeList;
alert(reslnArray[0].width);
alert(reslnArray[0].height);
alert(reslnArray[1].width);
alert(reslnArray[1].height);
}
                   ]]>
                  </JAVASCRIPT>
                </CODE>
              </SECTION>
            </SECTIONS>
          </EXAMPLE>
          <EXAMPLE title="Transfering an image to HTTP server">
            <SECTIONS>
              <SECTION>
                <DESC>This example demonstrate how user can transfer an image to http server. This will be useful when application is running on a remote server.</DESC>
                <CODE>
                  <JAVASCRIPT>
                    <![CDATA[
//enumerate the available cameras on the device
var camArray = EB.Camera.enumerate();

//below is the callback fired by network api after image upload to the server is completed
var upload_file_callback = function (args){
        status = args['status'];
		//a status ok indicates image transferred successfully
        alert(status);
       }

//below is the camera call back fired after takePicture is called
var camera_callbackFunc = function(cbData){ 
  alert(cbData.imageUri); 
  //set the upload file properties; Refer network module for more details
  var uploadfileProps = {
           url: 'http://10.233.82.51:8081/upload_image_file',
          //authType: "basic",
          //authUser: "admin",
          //authPassword: "password",
          filename: cbData.imageUri,
          body: "uploading file",
          fileContentType: "image/jpeg"
        };
   
   //below is the network module API used for uploading images when camera fire the callback
   EB.Network.uploadFile(uploadfileProps, upload_file_callback);      
 };
 
 //below is the test function which is used for capturing an image with outputFormat set as imagePath
function Test_image_transfer1()
{ 
  //invoke takePicture API with outputFormat as imagePath and set the callback method
  camArray[0].takePicture({'fileName' : '/Application/Test/myImagename', 'outputFormat': 'imagePath'}, camera_callbackFunc);
}
 //below is the test function which is used for choosing a picture from device with outputFormat set as imagePath
function Test_image_transfer2()
{ 
  //invoke choosePicture API with outputFormat as imagePath and set the callback method
  EB.Camera.choosePicture({'outputFormat': 'image'}, camera_callbackFunc);
}
      

                   ]]>
                  </JAVASCRIPT>
                </CODE>
              </SECTION>
            </SECTIONS>
          </EXAMPLE>
		            <EXAMPLE title="Dispalying an image using image uri.">
            <SECTIONS>
              <SECTION>
                <DESC>This example demonstrate how user can dispaly an image using image uri. The callback will return a image uri when outputFormat is set to 'image'</DESC>
                <CODE>
                  <JAVASCRIPT>
                    <![CDATA[
//enumerate the available cameras on the device
var camArray = EB.Camera.enumerate();



//below is the camera call back fired after takePicture is called
var camera_callbackFunc = function(cbData){ 

  //uri will have relative path info only
  //user has to form the absolute local server path as shown below
  uri = 'http://localhost:'+EB.System.localServerPort + cbData.imageUri;
  //set the image uri to the image element
  document.getElementById('imageUri').src = uri ;
  
 };
 
 //below is the test function which is used for capturing an image with outputFormat set as image
function Test_image_uri()
{ 
  //invoke takePicture API with outputFormat as image and set the callback method
  camArray[0].takePicture({'outputFormat': 'image'}, camera_callbackFunc);
}
      

                   ]]>
                  </JAVASCRIPT>
                </CODE>
              </SECTION>
            </SECTIONS>
          </EXAMPLE>
		</EXAMPLES>
        <REMARKS>
            <REMARK title="SDCard Access">
                <DESC>The capability for SDCard has already been granted on build, and any capability added by you will be ignored. This being the case, the following extensions will always be able to write to the SD card by default.</DESC>
            </REMARK>
			<REMARK title="Camera Preview">
                <DESC>In some of the WM/CE devices, though user has opted for a full screen, preview rendering size is decided by the driver.</DESC>
            </REMARK>
			<REMARK title="DataUri">
                <DESC>DataUri output is highly dependent on virtual space availability. DataUri may fail(Unresponsive/Reboot/Degraded Performance/Never load) in certain devices; recommended to use image path in such devices.</DESC>
            </REMARK>
			<REMARK title="ImageUri">
                <DESC>Image uri display is dependent on browser capability.</DESC>
            </REMARK>
			<REMARK title="GetSupportedProperties in WP8">
                <DESC>WP8 does not support getSupportedProperties and SetSupportedProperties</DESC>
            </REMARK>
		    <REMARK title="colorModel as Grayscale in Android">
                <DESC>Grayscale is supported only in consumer android devices for front camera</DESC>
            </REMARK>
            <REMARK title="Invalid/Null values for properties in Android and iOS">
                <DESC>Only valid and non-empty values for properties are supported in Android and iOS</DESC>
            </REMARK>
			<REMARK title="Ruby Support">
            <DESC>Due to platform limitation imager and color camera is not supported in ruby applications for CE5 and CE6 devices.</DESC>
            </REMARK>
            <REMARK title="Camera in Suspend mode">
              <DESC>All WM and CE7 devices automatically turn off both color and imager cameras when the device is suspended. User has to restart the camera on resume. Whereas CE5 (eg:MC9000) and CE6 (eg: MC31) devices retain the preview on resuming from suspend state.</DESC>
            </REMARK>
            <REMARK title="Image saving while take picture">
              <DESC>Image captured in few devices(eg: Samsung), irrespective of picture taken (Landscape/Portrait) , will always save in Landscape Mode, Even though on the device it appears as captured(landscape/Portrait), when the same is copied to Desktop, you can see that it will be in Landscape Mode.This is default behaviour of the device</DESC>
            </REMARK>
			<REMARK title="Devices lacking support">
            <DESC>Due to platform limitation devices such as ES400, MC65 and MC67 does not support color camera.</DESC>
            </REMARK>
            <REMARK title="takepicture Resolution Issue on Low Memory Device WP8">
            <DESC>In devices having low processor, lower resolution image capture may show a small area of preview on black background at the time of transition back to application.</DESC>
            </REMARK>
            <REMARK title="Android  Black Image in Gallery for kitkat">
            <DESC>Whenever an image is taken from Rho camera,on opening galery or choose picture, we can see a black image, when system refreshes the gallery this will be gone.</DESC>
            </REMARK>
        </REMARKS>
    </MODULE>
</API>
