<?xml version = "1.0"?>
<API>
    <MODULE name="Notification" parent="Rho">
        <HELP_OVERVIEW>The Notification API allows you to provide feedback to the user, either auditory, tactile or visual. Use this API to give a visual popup window, sound the device beeper or illuminate the device LEDs (hardware permitting).</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the 'coreapi' extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby.
        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Notification API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the '/Enterprise Browser/JavaScript Files/Enterprise Browser' directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the 'ebapi.js' in your HTML as well as the API file you want to use. For instance, to use the Notification API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.notification.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.

        </MORE_HELP_EB>
        <PLATFORM>iOS, Android, WM</PLATFORM>
        <PLATFORM_EB>Android, WM</PLATFORM_EB>
        <TEMPLATES>
        </TEMPLATES>

        <METHODS access="STATIC">

            <METHOD name="showPopup" access="STATIC" hasCallback="optional">
                <DESC>Bring the application up front and show a message in a popup window. The message can be passed as a string or a hash. The popup window closes after you click on one of the buttons in the 'button' array. All custom icons' paths must be absolute paths to the icon file. Icon is not supported on iOS devices.</DESC>
                <DESC_EB>Bring the application up front and show a message in a popup window. The message can be passed as a string or a hash. The popup window closes after you click on one of the buttons in the 'button' array. All custom icons' paths must be absolute paths to the icon file.</DESC_EB>
                <PLATFORM>WM, CE, Android, iOS, Win32</PLATFORM>
                <PLATFORM_EB>WM, CE, Android, Win32</PLATFORM_EB>
                <PARAMS>
                    <PARAM name="propertyMap" type="HASH">
                        <DESC>The properties associated with the popup.</DESC>
                        <PARAMS>
                            <PARAM name="message" type="String" default="">
                                <DESC>Text displayed in the popup window.</DESC>
                            </PARAM>
                            <PARAM name="title" type="String" default="">
                                <DESC>Title of the popup window.</DESC>
                            </PARAM>
                            <PARAM name="icon" type="String" default="">
                                <DESC>Icon to be displayed in the popup window. path to an image, or :alert for ! icon, :question for ? icon, :info for information icon. On Windows Mobile/CE, Windows and RhoSimulators only predefined icons are supported.</DESC>
                                <DESC_EB>Icon to be displayed in the popup window. path to an image, or :alert for ! icon, :question for ? icon, :info for information icon. On Windows Mobile/CE only predefined icons are supported. The file that you are playing must be located on the device or the icon may not display properly.</DESC_EB>
                                <PLATFORM>Android</PLATFORM>
                            </PARAM>
                            <PARAM name="buttons" type="Array" default="">
                                <DESC>Array of buttons. Specify each button either by hash with :id and :title keys or string.When using strings, the 'id' and 'title' will have the same value.
For example:

    :::javascript
    buttonHash = [{id:'yes',title:'Ok to Delete'},{id:'no',title:'No'}];
    buttonString = ['Yes', 'No'];

>NOTE: For Android, if TYPE_NOTIFICATION_DIALOG is used, every button in the notification uses an icon. By default a star icon is used. If the button id is 'accept' then the system accept icon is used. If the button id is 'cancel' then the system cancel icon is used.
</DESC>
                            </PARAM>
                            <PARAM name="types" type="Array">
                                <DESC>List which notification kinds will be shown. Several types may be listed at same time. 'TYPE_NOTIFICATION' and 'TYPE_NOTIFICATION_DIALOG' take no effect if application is in the foreground. By default '[Rho.Notification.TYPE_DIALOG, Rho.Notification.TYPE_NOTIFICATION]' is used.
Example:

    :::javascript
    typeToast = [Rho.Notification.TYPE_DIALOG, Rho.Notification.TYPE_TOAST];</DESC>
<DESC>List which notification kinds will be shown. Several types may be listed at same time. 'TYPE_NOTIFICATION' and 'TYPE_NOTIFICATION_DIALOG' take no effect if application is in the foreground. By default '[EB.Notification.TYPE_DIALOG, Rho.Notification.TYPE_NOTIFICATION]' is used.

Example:

    :::javascript
    typeToast = [EB.Notification.TYPE_DIALOG, Rho.Notification.TYPE_TOAST];
</DESC>
                                <PLATFORMS>Android</PLATFORMS>
                                <VALUES>
                                  <VALUE constName="TYPE_DIALOG" value="dialog">
                                    <DESC>Show common dialog window with buttons visible if application is active.</DESC>
                                  </VALUE>
                                  <VALUE constName="TYPE_NOTIFICATION" value="notification">
                                    <DESC>Show message in Android notification bar if application is at background. Touch the message opens the application.</DESC>
                                  </VALUE>
                                  <VALUE constName="TYPE_NOTIFICATION_DIALOG" value="notificationDialog">
                                    <DESC>This is the same as 'TYPE_DIALOG' + 'TYPE_NOTIFICATION'.

>NOTE: In Android 4.1 and above, buttons are also added to the notification message so the user can interact with the application without application activation (dialog window is not shown if user pressed button in notification). Buttons are not always displayed in the notification area - this depends on screen size and layout and system decides whether to show buttons. You need to drag notification to make buttons appear.</DESC>
                                  </VALUE>
                                  <VALUE constName="TYPE_TOAST" value="toast">
                                    <DESC>Show toast window with message at foreground for a short time. The toast is visible nevertheless the application is at background or foreground but is not shown same time with any foreground pop-up.</DESC>
                                  </VALUE>
                                </VALUES>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </PARAMS>
                <CALLBACK type="HASH">
                    <DESC>A hash/object is returned indicated which button was pressed.</DESC>
                    <PARAMS>
                        <PARAM name="button_id" type="STRING">
                            <DESC>ID assigned to the button when showing the popup.</DESC>
                        </PARAM>
                        <PARAM name="button_title" type="STRING">
                            <DESC>Button text.</DESC>
                        </PARAM>
                        <PARAM name="button_index" type="STRING">
                            <DESC>The index in the 'buttons' array.</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>

            <METHOD name="hidePopup" access="STATIC" hasCallback="none">
                <DESC>Closes the current popup window. On Windows Mobile/CE, Windows and RhoSimulators only Status window, displayed by showStatus can be hide.</DESC>
                <DESC_EB>Closes the current popup window. On Windows Mobile/CE only Status window, displayed by showStatus can be hide.</DESC_EB>
                <PLATFORM>WM, CE, Android, iOS, Win32</PLATFORM>
                <PLATFORM_EB>WM, CE, Android, Win32</PLATFORM_EB>
            </METHOD>

            <METHOD name="showStatus" access="STATIC" hasCallback="none">
                <DESC>Display a window containing a status message. The window closes after the user clicks on its hide button. Note: Android will show a toast message for a short time in addition to a dialog window.</DESC>
                <PLATFORM>WM, CE, Android, iOS, Win32</PLATFORM>
                <PLATFORM_EB>WM, CE, Android, Win32</PLATFORM_EB>
                <PARAMS>
                    <PARAM name="title" type="STRING">
                        <CAN_BE_NIL/>
                        <DESC>The title on the status message popup window.</DESC>
                    </PARAM>
                    <PARAM name="status_text" type="STRING">
                        <DESC>The status message displayed in the popup status window.</DESC>
                    </PARAM>
                    <PARAM name="hide_button_label" type="STRING">
                        <DESC>The label text for the hide button in the popup status window. On Windows Mobile/CE, Windows and RhoSimulators Windows Close icon used to hide the status window.</DESC>
                        <DESC_EB>The label text for the hide button in the popup status window. On Windows Mobile/CE Close icon used to hide the status window.</DESC_EB>
                        <PLATFORM>iOS, Android, WP8</PLATFORM>
                        <PLATFORM_EB>Android, WP8</PLATFORM_EB>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="playFile" access="STATIC" hasCallback="none">
                <DESC>Play an audio file if that media type is supported by the device.</DESC>
                <PLATFORM>iOS, Android, WM</PLATFORM>
                <PLATFORM_EB>Android, WM</PLATFORM_EB>
                <PARAMS>
                    <PARAM name="path" type="STRING">
                        <DESC>The full absolute path to the file, ending in the file name and extension.</DESC>
                        <DESC_EB>The full absolute path to the file, ending in the file name and extension. The file that you are playing must be located on the device or the file may not play correctly.</DESC_EB>
                    </PARAM>
                    <PARAM name="media_type" type="STRING" default="">
                        <CAN_BE_NIL/>
                        <DESC>Media type can be specified explicitly, or can be recognized from the file extension. The known file extensions are ".mp3" - "audio/mpeg" and ".wav" - "audio/x-wav".</DESC>
                        <PLATFORM>iOS, Android</PLATFORM>
                        <PLATFORM_EB>Android</PLATFORM_EB>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="beep" access="STATIC" hasCallback="none">
                <DESC>If the device is equipped with a beeper then a beep will be emitted. Not supported on iOS devices.</DESC>
                <DESC_EB>If the device is equipped with a beeper then a beep will be emitted.</DESC_EB>
                <PLATFORM>Android, WM</PLATFORM>
                <PARAMS>
                    <PARAM name="propertyMap" type="HASH">
                        <DESC>The properties associated with the beep.</DESC>
                        <PARAMS>
                            <PARAM name="frequency" type="Integer" default="2000">
                                <DESC>The frequency of the beep, in Hz.</DESC>
                            </PARAM>
                            <PARAM name="volume" type="Integer" default="1">
                                <DESC>A number between 0 and 3. 0 represents minimum volume and 3 is maximum volume, the decibels each volume level represents is device dependant.</DESC>
                            </PARAM>
                            <PARAM name="duration" type="Integer" default="1000">
                                <DESC>The duration of the beep, in milliseconds.</DESC>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="vibrate" access="STATIC" hasCallback="none">
                <DESC>Vibrate the device's pager hardware. Need 'vibrate' capability set at build.yml for Android.</DESC>
                <PLATFORM>iOS, Android, WM</PLATFORM>
                <PLATFORM_EB>Android, WM</PLATFORM_EB>
                <PARAMS>
                    <PARAM name="duration" type="Integer" default="1000">
                        <CAN_BE_NIL/>
                        <DESC>The duration of the vibration, in milliseconds. Note you may also need to add the vibration capability to your build.yml file. See remarks for maximum duration. iOS devices have fixed system vibration time. It could not be changed. Android and Windows devices have default vibration time 1000 ms.</DESC>
                        <DESC_EB>The duration of the vibration, in milliseconds. Note you may also need to add the vibration capability to your build.yml file. See remarks for maximum duration. Android and Windows devices have default vibration time 1000 ms.</DESC_EB>
                    </PARAM>
                </PARAMS>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[
Exiting RhoElements
=====================
If RhoElements is exited after applying notifications, the settings to LEDs will not revert.
        ]]>
        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM></PLATFORM>
        <EXAMPLES>
           <EXAMPLE title="Sound the device beeper">
            <SECTIONS>
              <SECTION>
               <DESC>Not every device is equipped with a hardware beeper but if present this code snippet will cause the beeper to sound.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# ---------------
# controller.rb
# ---------------

def sound_beeper
  # Obtain list of available leds on the device.
  beeperProps = Hash.new
  beeperProps['frequency'] = 3000;
  beeperProps['volume'] = 2;
  beeperProps['duration'] = 1500;
  Rho::Notification.beep(beeperProps)
end
                   ]]>
                 </RUBY>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Show an alert">
            <SECTIONS>
              <SECTION>
               <DESC>This example shows how to show an alert in JavaScript.</DESC>
               <CODE>
                <JAVASCRIPT>
           <![CDATA[
function show_alert()
{
    //creates a popup with a message and two buttons
    Rho.Notification.showPopup({
        title:'My Popup',
        message:'Do you really want to delete this record',
        buttons:[
            {id:'yes',title:'Ok to Delete'},
            {id:'no',title:'No'}]
        },
            function(e){
                if(e.button_id == "yes")
                {
                    // go ahead and delete the record
                }
            }
    );
}
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
       </EXAMPLES>
       <REMARKS>
            <REMARK title="Maximum vibrate duration">
                <DESC>On Android, the maximum duration for vibrate is 15 seconds (15000ms).</DESC>
            </REMARK>
            <REMARK title="Spuriously reported hardware">
                <DESC>Some Windows Mobile or CE devices may report hardware which is not present on the device such as a pager or LEDs. This is a limitation of the underlying driver layer reporting spurious results to the application, though all real hardware will be controllable.</DESC>
            </REMARK>
       </REMARKS>
    </MODULE>
</API>
