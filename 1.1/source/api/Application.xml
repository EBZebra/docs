<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Application" parent="Rho">
        <HELP_OVERVIEW>The Application class is used for accessing or setting application level configuration settings.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby
</MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Application API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Application API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.application.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.

        </MORE_HELP_EB>

        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES access="STATIC" generateAccessors="true">
            <PROPERTY name="appBundleFolder" type="STRING" readOnly="true" productException="eb">
                <DESC>Path to apps/app folder inside the application bundle.</DESC>
            </PROPERTY>
            <PROPERTY name="appsBundleFolder" type="STRING" readOnly="true" productException="eb">
                <DESC>Path to apps folder inside the application bundle.</DESC>
            </PROPERTY>
            <PROPERTY name="bundleFolder" type="STRING" readOnly="true">
                <DESC>Path to application bundle folder.</DESC>
                <DESC_EB>Path to the Enterprise Browser folder on the device.</DESC_EB>
            </PROPERTY>
            <PROPERTY name="userFolder" type="STRING" readOnly="true">
                <DESC>Path to folder where the application can write files and create subfolders.</DESC>
            </PROPERTY>
            <PROPERTY name="configPath" type="STRING" readOnly="true">
                <DESC>Path to the configuration file.</DESC>
            </PROPERTY>
            <PROPERTY name="modelsManifestPath" type="STRING" readOnly="true">
                <DESC>Path to file with the model list.</DESC>
            </PROPERTY>
            <PROPERTY name="databaseBlobFolder" type="STRING" readOnly="true">
                <DESC>Path to folder where the database blob files are stored. Blobs are usually images or binary files. In the ORM Model you would specify that the attribute is of type blob Ex. When capturing an image, the actual file is saved in the databaseBlobFolder.</DESC>
            </PROPERTY>
            <PROPERTY name="publicFolder" type="STRING" readOnly="true">
                <DESC>Path to the application's public folder.</DESC>
            </PROPERTY>

            <PROPERTY name="startURI" type="STRING">
                <DESC>Startup page for your application.</DESC>
            </PROPERTY>
            <PROPERTY name="settingsPageURI" type="STRING">
                <DESC>Settings page URI. Will be used when Options menu or toolbar item is chosen by user.</DESC>
            </PROPERTY>
            <PROPERTY name="splash" type="STRING" readOnly="true">
                <DESC>Splash screen image display options. This a string with several parameters divided by ';': delay=5;center;hcenter;vcenter;vzoom;hzoom;zoom.</DESC>
            </PROPERTY>
            <PROPERTY name="version" type="STRING" readOnly="true">
                <DESC>Version from build time configuration file (build.yml).</DESC>
                <DESC_EB>Version of Enterprise Browser.</DESC_EB>
            </PROPERTY>
            <PROPERTY name="title" type="STRING">
                <DESC>Define Window caption text. If missed - caption from page used. Not supported on Windows CE devices.</DESC>
                <PLATFORM>WM, Win32</PLATFORM>
            </PROPERTY>
            <PROPERTY name="appName" type="STRING" readOnly="true">
                <DESC>Application name.</DESC>
            </PROPERTY>
            <PROPERTY name="locale" type="STRING" readOnly="true" generateAPI="false">
                <DESC>Current application locale.Like 'en', 'ru' etc.</DESC>
                <APPLIES rubyOnly="true"/>
            </PROPERTY>
            <PROPERTY name="country" type="STRING" readOnly="true" generateAPI="false">
                <DESC>Current application country code.</DESC>
                <APPLIES rubyOnly="true"/>
            </PROPERTY>
            <PROPERTY name="nativeMenu" type="ARRAY">
                <PARAM type="HASH">
                    <PARAMS>
                        <PARAM name="label" type="STRING">
                            <DESC>Visible label.</DESC>
                        </PARAM>
                        <PARAM name="action" type="STRING"  rhoAction="true">
                            <DESC>URL to page which will be loaded into tab. It may be path to Ruby controller action; i.e. '/app/Account' would load the Account index action. For ruby callback use 'callback:/app/Account' Or JavaScript method to call: 'javascript: methodOnTab();'. Or path to html page to load.</DESC>
                            <DESC_EB>URL to page which will be loaded. Or it can be a JavaScript method to call: 'javascript: methodOnTab();'. Or path to html page to load.</DESC_EB>
                        </PARAM>
                    </PARAMS>
                </PARAM>
                <DESC>Native Menu items.</DESC>
                <PLATFORM>WM, CE, Android, Win32, WP8</PLATFORM>
            </PROPERTY>
            <PROPERTY name="defaultNativeMenu" type="ARRAY" readOnly="true" generateAPI="false">
                <DESC>Native Menu items.</DESC>
                <PARAM type="HASH">
                    <DESC>Same values as nativeMenu.</DESC>
                </PARAM>
                <PLATFORM>WM, CE, Android, Win32, WP8</PLATFORM>
            </PROPERTY>
            <PROPERTY name="securityTokenNotPassed" type="BOOLEAN" readOnly="true">
                <DESC>Indicates if the security token check was failed. Security token can be set in build.yml: security_token. Same security token should be passed as command line parameter '-security_token=token_value' to application. If security token check failed : if this page exist then application navigate to it, otherwise application will exit.</DESC>
                <DESC_EB>Indicates if the security token check was failed. Security token can be passed as command line parameter '-security_token=token_value' to the application. If security token check failed : if this page exist then application navigate to it, otherwise application will exit.</DESC_EB>
                <PLATFORM>WM, CE, Win32, Android, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
            </PROPERTY>
            <PROPERTY name="invalidSecurityTokenStartPath" type="STRING" readOnly="true">
                <DESC>Page to navigate to in case of check of SecurityToken failed. Can be set in rhoconfig.txt: invalid_security_token_start_path;</DESC>
                <DESC_EB>Page to navigate to in case of check of SecurityToken failed. Can be set in rhoconfig.txt: invalid_security_token_start_path; This file is located in the installation folder of the EnetrpriseBrowser application installed on the device.</DESC_EB>
                <PLATFORM>WM, CE, Win32, Android, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
            </PROPERTY>

            <PROPERTY name="rhoPlatformVersion" type="STRING" readOnly="true" generateDoc="false">
                <DESC>The version of RhoMobile platform, which was used to build the application.</DESC>
                <DESC_EB>The version of Enteprise Browser platform, which was used to build the application.</DESC_EB>
            </PROPERTY>

            <PROPERTY name="badLinkURI" type="STRING" readOnly="true">
                <DESC>Bad link URI to navigate in browser. This is defined in config.xml: Navigation\\BadLinkURI.</DESC>
                <PLATFORM>WM</PLATFORM>
                <APPLIES>WebKit</APPLIES>
                <MORE_HELP>
                    <![CDATA[ Navigates to the specified badlink uri when one of the following occurs:

    * There is an error attempting to navigate to the page, e.g. the device has no network connection.
    * The timeout occurs when navigating to the page. You can adjust the value of the timeout using the NavTimeout setting.
    * The user presses the stop button.

    The browser will automatically append the querystring value "badlink" containing the url of the page which could not be reached and "stop=true" if the page was loaded because the user pressed the stop button. The page specified in the badlink setting should be an offline file using the file:// protocol, this way the browser can always access the file. ]]>
                </MORE_HELP>
            </PROPERTY>
        </PROPERTIES>
        <METHODS  access="STATIC">
            <ALIASES>
            </ALIASES>
            <METHOD name="modelFolderPath">
                <DESC>Folder of the model by name.</DESC>
                <PARAMS>
                    <PARAM name="name" type="STRING">
                        <DESC>Model name.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING"/>
            </METHOD>
            <METHOD name="databaseFilePath">
                <DESC>Path to the ORM database file by partition name. Please note that this function does not create a database file. This function only generates the file path based on the application path and partition name.</DESC>
                <PARAMS>
                    <PARAM name="partitionName" type="STRING">
                        <DESC>Partition name.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING">
                    <DESC>Full path to the database file for given partition.</DESC>
                </RETURN>
            </METHOD>
            <METHOD name="expandDatabaseBlobFilePath">
                <DESC>Generates the absolute path to database blob file. Please note that this function does not the create database file. This function only generates the file path based on application path and partition name.</DESC>
                <PARAMS>
                    <PARAM name="relativePath" type="STRING">
                        <DESC>Relative path to the blob file, as it is stored in the database.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING">
                    <DESC>Full path to the database blob.</DESC>
                </RETURN>
            </METHOD>
            <METHOD name="relativeDatabaseBlobFilePath">
                <DESC>Generates the relative path to database blob file. Please note that this function does not create a database file. This function only generates the file path based on the application path and partition name.</DESC>
                <PARAMS>
                    <PARAM name="absolutePath" type="STRING">
                        <DESC>Absolute path to database blob file.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING"/>
            </METHOD>
            <METHOD name="quit">
                <DESC>Quit the application. Quitting the application while license screen is shown will be slightly delayed.</DESC>
            </METHOD>
            <METHOD name="minimize">
                <DESC>Minimize or move the application to background. When running in RhoSimulator this method is supported only for Windows OS.</DESC>
                <DESC_EB>Minimize or move the application to background. </DESC_EB>
                <PLATFORM>WM, CE, Win32</PLATFORM>
            </METHOD>
            <METHOD name="restore">
                <DESC>Restores the application to be in the foreground. When running in RhoSimulator the method is supported only for Windows OS.</DESC>
                <DESC_EB>Restores the application to be in the foreground.</DESC_EB>
                <PLATFORM>WM, CE, Win32</PLATFORM>
            </METHOD>
            <METHOD name="setApplicationNotify" hasCallback="mandatory" runInThread="none">
                <DESC>This method allows your application to register for application specific events like application activation/deactivation, UI creation/destruction as well as others. Check the Callback section for details.</DESC>
                <PLATFORM>WM, CE, Win32, Android, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
                <CALLBACK type="HASH">
                    <DESC>Application events are fired to inform about application state changes. Most of the events are handled only if application is in the foreground mode (activated). You should monitor APP_EVENT_ACTIVATED and APP_EVENT_DEACTIVATED to save application state and start up/shut down activities. Events APP_EVENT_SCREEN_ON and APP_EVENT_SCREEN_OFF should be used to put app into suspend mode without deactivation. Note: Event firing behavior depends on platform.</DESC>
                    <PARAMS>
                        <PARAM name="applicationEvent" type="STRING">
                            <DESC></DESC>
                            <VALUES>
                                <VALUE constName="APP_EVENT_ACTIVATED" value ="Activated">
                                    <DESC>The application has been activated.</DESC>
                                </VALUE>
                                <VALUE constName="APP_EVENT_DEACTIVATED" value ="Deactivated">
                                    <DESC>The application has been deactivated.</DESC>
                                </VALUE>
                                <VALUE constName="APP_EVENT_UICREATED" value ="UICreated" productException="eb">
                                    <DESC>Generated before the start page is loaded. There are no means to set callback and catch event in JavaScript. Ruby Application class descendant can set callback and process this event.</DESC>
                                </VALUE>
                                <VALUE constName="APP_EVENT_UIDESTROYED" value ="UIDestroyed">
                                    <DESC>This event is triggered when the application is closing and the UI has been cleared.</DESC>
                                </VALUE>
                                <VALUE constName="APP_EVENT_SCREEN_OFF" value ="ScreenOff">
                                    <DESC>Device screen was turned off when power button was pressed or due to idle timeout. Note: On iOS application is also deactivated (APP_EVENT_DEACTIVATED is fired). On Android the application is not deactivated.Not supported on Windows CE.</DESC>
                                    <DESC_EB>Device screen was turned off when power button was pressed or due to idle timeout. On Android the application is not deactivated.Not supported on Windows CE.</DESC_EB>
                                    <PLATFORM>Android, iOS, WM</PLATFORM>
                                    <PLATFORM_EB>WM, Android</PLATFORM_EB>
                                </VALUE>
                                <VALUE constName="APP_EVENT_SCREEN_ON" value ="ScreenOn">
                                    <DESC>Device screen was turned on and unlocked.Not supported on Windows CE.</DESC>
                                    <PLATFORM>Android, iOS, WM</PLATFORM>
                                    <PLATFORM_EB>WM, Android</PLATFORM_EB>
                                </VALUE>
                                <VALUE constName="APP_EVENT_SYNCUSERCHANGED" value ="SyncUserChanged" productException="eb">
                                    <DESC>Event when the current RhoConnect user has changed. This is available under Ruby Only.</DESC>
                                </VALUE>
                                <VALUE constName="APP_EVENT_CONFIGCONFLICT" value ="ConfigConflict" productException="eb">
                                    <DESC>This is available under Ruby Only.</DESC>
                                    <APPLIES rubyOnly="true"/>
                                </VALUE>
                                <VALUE constName="APP_EVENT_DBMIGRATESOURCE" value ="DBMigrateSource" productException="eb">
                                    <DESC>This is available under Ruby Only.</DESC>
                                    <APPLIES rubyOnly="true"/>
                                </VALUE>
                            </VALUES>
                        </PARAM>
                        <PARAM name="eventData" type="HASH">
                            <DESC>This will only contain values for the `APP_EVENT_CONFIGCONFLICT` event. This event may be triggered after an application was upgraded. If your rhoconfig.txt file contains custom properties that are different then what is being provided in the application upgrade package. By default local values are kept in place but you may overwrite configuration with new values and any other steps required for your application upgrade. `eventData` will be a hash. It will look like {"conflicting key" : ["new value","old value"].. }</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>

            <METHOD name="processApplicationEvent" generateAPI="false">
                <DESC>Ruby applications must use this method for processing of the application Event. May be called from setApplicationNotify callback.This method should be called for each event. The only exception is SyncUserChanged, where you can choose your own reset database logic.</DESC>
                <PLATFORM>WM, CE, Win32, Android, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="applicationEvent" type="STRING">
                        <DESC>See setApplicationNotify for applicationEvent values.</DESC>
                    </PARAM>
                    <PARAM name="eventData" type="HASH">
                        <DESC>This will only contain values for the `APP_EVENT_CONFIGCONFLICT` event. This event may be triggered after an application was upgraded. If your rhoconfig.txt file contains custom properties that are different then what is being provided in the application upgrade package. By default local values are kept in place but you may overwrite configuration with new values and any other steps required for your application upgrade. `eventData` will be a hash. It will look like {"conflicting key" : ["new value","old value"].. }</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>
            <METHOD name="setLocale" generateAPI="false" generateDoc="false" access="STATIC">
                <DESC>Set application specific locale.</DESC>
                <APPLIES rubyOnly="true"/>
                <PARAMS>
                    <PARAM name="localeCode" type="STRING"/>
                    <PARAM name="countryCode" type="STRING">
                        <CAN_BE_NIL/>
                    </PARAM>
                </PARAMS>
            </METHOD>
        </METHODS>
        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
        <EXAMPLES>
            <!-- This example commented out because setLocale is not exposed in docs. -->
            <!-- <EXAMPLE title="Set the locale">
            <SECTIONS>
              <SECTION>
               <DESC>If your application is internationalized, you may want to set the locale depending on the user's preference.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
Rho::Application.setLocale('en')
current_locale = Rho::Application.locale
Alert.show_popup(current_locale)
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
Rho.Application.setLocale('en')
var current_locale = Rho.Application.locale();
alert(current_locale)
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE> -->
           <EXAMPLE title="Get folders where items are stored">
            <SECTIONS>
              <SECTION>
               <DESC>There are times where you need access to files bundled with your application, or to write files to a safe folder. These examples show how to retrieve each of the several important folders available.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Get and show the various app folders
appFolder = Rho::Application.appBundleFolder
appsBundleFolder = Rho::Application.appsBundleFolder
databaseBlobFolder = Rho::Application.databaseBlobFolder
publicFolder = Rho::Application.publicFolder
userFolder = Rho::Application.userFolder

message = "App bundle folder: "+appFolder+"\n"+
"Apps bundle folder: "+appsBundleFolder+"\n"+
"Database blob folder: "+databaseBlobFolder+"\n"+
"Public folder: "+publicFolder+"\n"+
"User folder: "+userFolder

Alert.show_popup(message)
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
           <![CDATA[
     // Get and show the various app folders
     var appFolder = Rho.Application.appBundleFolder;
     var appsBundleFolder = Rho.Application.appsBundleFolder;
     var databaseBlobFolder = Rho.Application.databaseBlobFolder;
     var publicFolder = Rho.Application.publicFolder;
     var userFolder = Rho.Application.userFolder;

     var message = "App bundle folder: "+appFolder+"\n"+
     "Apps bundle folder: "+appsBundleFolder+"\n"+
     "Database blob folder: "+databaseBlobFolder+"\n"+
     "Public folder: "+publicFolder+"\n"+
     "User folder: "+userFolder;

     alert(message);
                   ]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
          <EXAMPLE title="Minimize your application">
            <SECTIONS>
              <SECTION>
               <DESC>This will minimize your application.</DESC>
               <CODE>
                <RUBY>
<![CDATA[Rho::Application.minimize]]>
                 </RUBY>
                <JAVASCRIPT>
<![CDATA[Rho.Application.minimize();]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Quit your application">
            <SECTIONS>
              <SECTION>
               <DESC>This will exit your application.</DESC>
               <CODE>
                <RUBY>
<![CDATA[Rho::Application.quit]]>
                 </RUBY>
                <JAVASCRIPT>
<![CDATA[Rho.Application.quit();]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Restore your application">
            <SECTIONS>
              <SECTION>
               <DESC>This will restore you application.</DESC>
               <CODE>
                <RUBY>
<![CDATA[Rho::Application.restore]]>
                 </RUBY>
                <JAVASCRIPT>
<![CDATA[Rho.Application.restore();]]>
                 </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
       </EXAMPLES>
    </MODULE>
</API>
