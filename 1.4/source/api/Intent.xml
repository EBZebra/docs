<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Intent" parent="Rho"  productException=''>
        <HELP_OVERVIEW>The Intent API provides an inter-application broadcast message-passing framework.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby.
    </MORE_HELP>
         <MORE_HELP_EB>
## Enabling the API

There are two methods of enabling the Intent API:

* Include all 'ebapi' modules
* Include only the API modules you need

Both methods are explained below. 

Either way, the included files will be found in: 
`/Enterprise Browser/JavaScript Files/Enterprise Browser`,
a directory on the computer that contains the Enterprise Browser installation.

### Include all JS API modules
To include all JavaScript APIs, copy the `ebapi-modules.js` file to a location accessible by your app's files and include the JavaScript modules file in your app. For instance, to include the modules file in your `index.html`, copy the file to the same directory as your index.html and add the following line to the HEAD section of your index.html file:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

&gt; This will define the EB class within the page. **Note that the path for this file is relative to the current page** (index.html). Any page on which the modules are required will need to have the required .js file(s) included in this fashion.

### Include only the modules you need
To include individual APIs, you must first include the `ebapi.js` in your HTML, and then the additional required API file(s). For instance, to use the Intent API, add the following code to the HTML file(s). Again, this assumes that relevant API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.intent.js"&gt;&lt;/script&gt;

&gt; In the code lines above, notice that `ebapi.js` is included first, followed by `eb.intent.js`, which is the Intent API for Enterprise Browser. **This coding is required on each HTML page whenever an individual API will be called from that page**.

        </MORE_HELP_EB>
        <TEMPLATES>
        </TEMPLATES>
        <METHODS  access="STATIC">
            <METHOD name="send" hasCallback="optional" runInThread="ui">
                <DESC>Sends an intent. The receiver of the intent can either be another RhoMobile  application that is listening for this Intent characteristic or on Android can be a native Android application setup with an Intent-Filter that will trigger based on the parameters of this method.

**Android Note**: On Android, the callback should be used only when the intentType is set to START_ACTIVITY. The only valid way for an Android app to pass a private file from a package directly to another application is to set the 'uri' parameter with content URI: 

Sample JavaScript:

    :::javascript
    var params = {
        intentType: Rho.Intent.START_ACTIVITY,
        action: "ACTION_VIEW",
        uri: "content://com.rhomobile.sample/rhodata/apps/public/sample.pdf"
    }
    Rho.Intent.send(params);

In most cases the extension of the exported file also must be added to the 'android:no_compression' list in the `build.yml:`


Sample Build.yml

    :::ruby
    android:
      no_compression: ['pdf','html','css']


</DESC>
            <DESC_EB>Sends an intent. The receiver of the intent can be another application that is listening for this Intent characteristic or, on Android, the receiver can be a native Android application set up with an Intent-Filter that will trigger based on the parameters of this method.

**Android Note**: On Android, the callback should be used only when the intentType is set to START_ACTIVITY. The only valid way for an Android app to pass a private file from a package directly to another application is to set the 'uri' parameter with content URI. 
            </DESC_EB>
                <PARAMS>
                    <PARAM name="params" type="HASH">
                        <DESC>A hash-map with intent parameters.</DESC>
                        <PARAMS>
                            <PARAM name="intentType" type="STRING">
                                <DESC>Type of Intent to send. </DESC>
                                <VALUES>
                                    <VALUE constName="BROADCAST" value ="broadcast">
                                        <DESC>Use the intent as broadcast intent.</DESC>
                                    </VALUE>
                                    <VALUE constName="START_ACTIVITY" value ="startActivity">
                                        <DESC>Use the intent to start a UI activity.</DESC>
                                        <PLATFORM>Android</PLATFORM>
                                    </VALUE>
                                    <VALUE constName="START_SERVICE" value ="startService">
                                        <DESC>Use the intent to start a background service.</DESC>
                                        <PLATFORM>Android</PLATFORM>
                                    </VALUE>
                                </VALUES>
                            </PARAM>
                            <PARAM name="permission" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Permission used to send a broadcast intent.</DESC>
                            </PARAM>
                            <PARAM name="action" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Intent action. See <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String))">Android docs</a>]]> for possible values. Use the Constant Value instead of the actual Constant Name. For example, for the Constant<![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#ACTION_PICK)">ACTION_PICK</a>]]> use 'android.intent.action.PICK' instead.

</DESC>
                            </PARAM>
                            <PARAM name="categories" type="ARRAY">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>List of intent categories. See <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#addCategory(java.lang.String\)"> Android docs</a> ]]> for possible values. Use the Constant Value instead of the actual Constant Name. For example, for the Constant <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#CATEGORY_HOME)">CATEGORY_HOME</a> ]]> use 'android.intent.category.HOME' instead. 

</DESC>
                                <PARAM type="STRING"/>
                            </PARAM>
                            <PARAM name="appName" type="STRING">
                                <DESC>Explicit name of the application to run on the device. The platform will determine the value to use.

* iOS it is BundleURLScheme of executed application.
* Android it is application package name.
* Windows it is the application/executable name. For shared runtime based applications, the application name is taken from the "Name" attribute from the Config.xml file. Hence use the application name which is mentioned in config.xml.
</DESC>
                                <DESC_EB>Explicit name of the application to run on the device. The platform will determine the value to use.

<![CDATA[ On Android, use the application package name. On Windows use the application/executable name. For shared runtime applications, the application name is taken from the 'Name' attribute in the Config.xml file. ]]>
</DESC_EB>
                            </PARAM>
                            <PARAM name="targetClass" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Explicit name of the class in the application that will receive the intent. Must be specified if and only if 'appName' is defined.</DESC>
                            </PARAM>
                            <PARAM name="uri" type="STRING">
                                <DESC>Open the application associated with the URI. Behavior may be different on different platforms and on software installed. For example, open URL with 'http://' prefix usually executes the Web Browser installed on system and opens the URL in that browser. On Android, this is similar to <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri\))">Intent.setData()</a>. For example, if sending a <![CDATA[ <a href="http://developer.android.com/guide/components/intents-common.html#Maps)">Map Intent</a>, you might set this value to something like 'geo:47.6,-122.3.']]>
</DESC>
                            </PARAM>
                            <PARAM name="mimeType" type="STRING">
                                <DESC>MIME type of data defined in the intent. For example, for Plain Text one would use 'text/plain.' On Android, this is similar to <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#setType(java.lang.String\))">Intent.setType</a>.]]>
</DESC>
                            </PARAM>
                            <PARAM name="data" type="HASH">
                                <DESC>Data to be sent within the intent. On Android, this is similar to <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String, java.lang.String\))">Intent.putExtra</a>, and 'data' should contain a HASH of Extra-String/Value pairs. The 'Value' type of the 'Extra' can be a String, Integer, Boolean or Double. Other object types are not supported at this time. For sample code, please refer to examples section, below. Use the full constant string 'android.intent.extra.TEXT' in place of <a href="http://developer.android.com/reference/android/content/Intent.html#EXTRA_TEXT">Intent.EXTRA_TEXT</a>.]]>

</DESC>
                            </PARAM>
                         </PARAMS>
                    </PARAM>
                </PARAMS>
                <CALLBACK type="HASH">
                    <DESC>Same format as 'params' argument and some additional values described below.
                          Android: Developer has to ensure that the response is addressed to this call because of possible conflicts in integer request code with other extensions.</DESC>
                    <PARAMS>
                        <PARAM name="responseCode" type="INTEGER">
                            <PLATFORM>Android</PLATFORM>
                            <DESC>Response code passed to Android Activity.setResult() method. <![CDATA[ <a href="http://developer.android.com/reference/android/app/Activity.html#RESULT_OK)">RESULT_OK</a> = -1. Check <a href="http://developer.android.com/reference/android/app/Activity.html#setResult(int\))">Android Docs</a>]]> for more information. Other attributes, such as 'uri' may be returned depending on the Intent that was triggered. Possible parameters include the same params that are used in this 'send(params)' method.
                            </DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>
            <METHOD name="startListening" hasCallback="mandatory" runInThread="none" >
                <DESC_EB>Start listening for custom intents. </DESC_EB>
                    <DESC>Start listening for custom intents.

For Android, this is how we have implemented [Android Intent Filters](http://developer.android.com/guide/components/intents-filters.html#Receiving). In order to listen for Intents you will have to update the `AndroidManifest.erb` file and add a special section to it. This file is now generated with RhoMobile Version 4.1 when you create a new project. The file is located in the root of project.

Add the following snippet to AndroidManifest.erb within the `manifest` tags
<![CDATA[
    :::xml
    <receiver android:name='com.rho.intent.IntentReceiver'>
      <intent-filter>
        <action android:name="Intent.ACTION_BATTERY_CHANGED" />
      </intent-filter>
    </receiver>
]]>

Notice that this looks very similar to a standard AndroidManifest.XML file section except the `receiver` is the common RhoMobile intent receiver. The `intent-filter` tags within this section are standard AndroidManifest.XML notation that you would put in for the Intent-Filters that you want to listen for. Consult the [Android Docs](http://developer.android.com/guide/components/intents-filters.html#Receiving) for more information about Intent Filters. From your Android application, you would use the [sendBroadcast() method](http://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent\)) with the appropriate parameters for this filter.
</DESC>
                <CALLBACK type="HASH">
                    <DESC>Same format as 'params' argument passed to Rho.Intent.send method
                        Android: Developer has to ensure that an intent passed to handler is what he intended to proceed since any other intent may also be passed here.</DESC>
                </CALLBACK>
                <PLATFORM_EB>Android, WM</PLATFORM_EB>
            </METHOD>
            <METHOD name="stopListening" hasCallback="none" productException="">
                <DESC>Stop listening for custom intents.</DESC>
            </METHOD>
        </METHODS>
        <REMARKS>
            <REMARK title="Registering Intent Receiver">
                <DESC>
                    <![CDATA[
For an Android app to receive intent data, the Intent receiver must be registered in the app's `AndroidManifest.erb` file. Please refer to the <a href="../guide/intent">Intent Guide</a> for more information. 
                    ]]>
                </DESC>
                <DESC_EB>
                    <![CDATA[
For an Android app to receive intent data, the Intent receiver must be registered in the app's `Config.xml` file. Please refer to the <a href="#guide-configreference?Intent">Intent section of the EB Config Reference</a> for more information. 
                    ]]>
                </DESC_EB>
            </REMARK>
        </REMARKS>
        <VER_INTRODUCED>4.1.0</VER_INTRODUCED>
        <PLATFORM>iOS, WM, Android</PLATFORM>
        <PLATFORM_EB>Android, WM</PLATFORM_EB>
        <EXAMPLES>
            <EXAMPLE title="Plot a location on a map">
                <SECTIONS>
                    <SECTION>
                        <DESC>You can use the Intent API to use the default mapping program to plot locations.</DESC>
                        <CODE>
                            <RUBY>
def send_geo
  intent_params = {:action     => "android.intent.action.VIEW",
                   :intentType => Rho::Intent::START_ACTIVITY,
                   :uri        => "geo:37.422, -122.084"}

  Rho::Intent.send intent_params
end</RUBY>
                            <JAVASCRIPT>
function sendGeo(){
  var intentParams = {action     : "android.intent.action.VIEW",
                      intentType : Rho.Intent.START_ACTIVITY,
                      uri        : "geo:37.422, -122.084"};

  Rho.Intent.send(intentParams);
}</JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
            <EXAMPLE title="Sending Extras">
                <SECTIONS>
                    <SECTION>
                        <DESC>Sometimes you will want to send some extras along with an intent such as an SMS body or do a web search with a given string. Here is an example of an intent that will launch the default web browser and perform a search with the default search engine.</DESC>
                        <CODE>
                            <RUBY>
def web_search
  intent_params = { :action     => "android.intent.action.WEB_SEARCH",
                    :intentType => Rho::Intent::START_ACTIVITY,
                    :data       => { :query => "Rhomobile docs" } }

  Rho::Intent.send intent_params
end</RUBY>
                            <JAVASCRIPT>
function webSearch(){}
  var intentParams = {action     : "android.intent.action.WEB_SEARCH",
                      intentType : Rho.Intent.START_ACTIVITY,
                      data       : {query : "Rhomobile docs"}}

  Rho.Intent.send(intentParams)
}</JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
        </EXAMPLES>
        <EXAMPLES_EB>
            <EXAMPLE title="Sending Data Within an Intent">
                <SECTIONS>
                    <SECTION>
                        <DESC>This example shows how to send data within an intent. On Android, this is similar to <![CDATA[ <a href="http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String, java.lang.String\))">Intent.putExtra</a>. Data should contain a HASH of Extra-String/Value pairs. The 'Value' type of the 'Extra' can be a String, Integer, Boolean or Double. Notice the use of the full constant string 'android.intent.extra.TEXT' in place of <a href="http://developer.android.com/reference/android/content/Intent.html#EXTRA_TEXT">Intent.EXTRA_TEXT</a>.]]></DESC>
                        <CODE>
<JAVASCRIPT>
<![CDATA[

Android (Java)

    intent.putExtra("intent.extra.string", 'Here is the text I am passing to the Intent');
    intent.putExtra("intent.extra.integer", 12);
    intent.putExtra("intent.extra.boolean", true);
    intent.putExtra("intent.extra.double", 14.28);

JavaScript

    var data: { 'intent.extra.string' : "Here is the text I am passing to the Intent" ,
                'intent.extra.integer' : 12 ,
                'intent.extra.boolean' : true ,
                'intent.extra.double' : parseFloat("10.55")}
              };




                                ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
        </EXAMPLES_EB>

    </MODULE>
</API>
