<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
  <MODULE name="Database" parent="Rho" generateUnderscoreRubyNames="true">
    <HELP_OVERVIEW>Database is low-level API to access SQLite local database.</HELP_OVERVIEW>
    <MORE_HELP>This API used internally by RHOM. To use RHOM, just define your models and partition databases will be created automatically.
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby.
    </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Database API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Database API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.database.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.          
        </MORE_HELP_EB>

    <ALIASES>
    </ALIASES>

    <TEMPLATES>
    </TEMPLATES>

    <METHODS>
      <ALIASES>
        <ALIAS new="commit" existing="commitTransaction" deprecated="true"/>
        <ALIAS new="rollback" existing="rollbackTransaction" deprecated="true"/>
        <ALIAS new="table_exist?" existing="isTableExist" deprecated="true"/>
        <ALIAS new="is_ui_waitfordb" existing="isUiWaitForDb" deprecated="true"/>
        <ALIAS new="set_do_not_bakup_attribute" existing="setDoNotBackupAttribute" deprecated="true"/>
      </ALIASES>
      <METHOD name="initialize" constructor="true" generateAPI="false">
        <DESC>This method is a constructor for this class. Instead of saying Rho.Database.initialize(dbPath,dbPartition) you would use new Rho.Database(dbPath,dbPartition). ex: `var db = new Rho.Database(Rho.Application.databaseFilePath('test'), 'test');` Make sure you issue a `.close()` when you are finished using the database. If the database file does not exist it will be created using a SQL schema: rhodes\platform\shared\db\res\db\syncdb.schema. Do not use predefined partition names: app, user, local. Do not open the same database file in different partitions. Do not use the same partition for different database files. Do not open the same file twice.</DESC>
        <DESC_EB>This method is a constructor for this class. Instead of saying `EB.Database.initialize(dbPath,dbPartition)` you would use `new EB.Database(dbPath,dbPartition)`. ex: `var db = new EB.Database(EB.Application.databaseFilePath('test'), 'test');` Make sure you issue a `.close()` when you are finished using the database. If the database file does not exist it will be created using a default SQL schema. Do not use predefined partition names: app, user, local. Do not open the same database file in different partitions. Do not use the same partition for different database files. Do not open the same file twice.</DESC_EB>
        <PARAMS>
          <PARAM name="dbPath" type="STRING">
            <DESC>The path to the database. Databases stored at the path provided by Application.databaseFilePath.</DESC>
          </PARAM>
          <PARAM name="dbPartition" type="STRING">
            <DESC>The database partition. Used as a file name for database and when connecting to RhoConnect server.</DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="close" destructor="true" generateAPI="false">
        <DESC>Closes the database. The database will not be accessible until it is opened again.</DESC>
      </METHOD>
      <METHOD name="startTransaction" generateAPI="false">
        <DESC>Start database transaction. All operations will not be the saved to the database until a commit is executed.</DESC>
      </METHOD>
      <METHOD name="commitTransaction" generateAPI="false">
        <DESC>Commit database transaction. Saves all updates to the database from the start of the transaction.</DESC>
      </METHOD>
      <METHOD name="rollbackTransaction" generateAPI="false">
        <DESC>Rollback database transaction. This will cancel any pending actions to the database that were executed since the last Start and before a commit.</DESC>
      </METHOD>
      <METHOD name="lockDb" generateAPI="false" generateDoc="false">
        <DESC>Lock database. This method should be used to synchronize Database access with RhoConnect client. The startTransaction method also locks the database but if you're going to read from database, lockDb is faster.</DESC>
      </METHOD>
      <METHOD name="unlockDb" generateAPI="false" generateDoc="false">
        <DESC>Unlock database, previously locked by lockDb.</DESC>
      </METHOD>
      <METHOD name="isUiWaitForDb" generateAPI="false" generateDoc="false">
        <DESC>Indicates if UI waiting for DB? Should be used in separate thread, which updates database (implementing custom data sync logic). Will be true when database method calls from Main application thread and waits for database.</DESC>
        <RETURN type="BOOLEAN"/>
      </METHOD>
      <METHOD name="executeSql" generateAPI="false" >
        <DESC>Execute the sql statement specified in the method's parameters.</DESC>
        <PARAMS>
          <PARAM name="sqlStmt" type="STRING">
            <DESC>The SQL statement.</DESC>
          </PARAM>
          <PARAM name="args" type="ARRAY">
            <DESC>Array of the sql expressions.</DESC>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>
        <RETURN type="ARRAY">
            <DESC>Array of Hashes. Each Hash item represents record from Database.</DESC>
        </RETURN>
      </METHOD>
      <METHOD name="executeBatchSql" generateAPI="false" >
        <DESC>Execute a series of sql statements included in the sqlStmt string parameter.</DESC>
        <PARAMS>
          <PARAM name="sqlStmt" type="STRING">
            <DESC>The SQL statement.</DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="import" deprecated="true" generateAPI="false" generateDoc="false">
        <DESC>Import the contents of the archived database into the current database.</DESC>
        <PARAMS>
          <PARAM name="zipName" type="STRING">
            <DESC>The name of the zip file.</DESC>
          </PARAM>
        </PARAMS>
        <RETURN type="BOOLEAN"/>
      </METHOD>
      <METHOD name="export" deprecated="true"  generateAPI="false"  generateDoc="false">
        <DESC>Exports the contents of the current database to a file.</DESC>
        <RETURN type="STRING"/>
      </METHOD>
      <METHOD name="destroyTable" generateAPI="false">
        <DESC>Destroys a database table.</DESC>
        <PARAMS>
          <PARAM name="tableName" type="STRING">
            <DESC>Table name to destroy.</DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="destroyTables" generateAPI="false">
        <DESC>Destroy a list of database tables.</DESC>
        <PARAMS>
          <PARAM name="propertyMap" type="HASH">
            <PARAMS>
              <PARAM name="include" type="ARRAY">
                <DESC>Include tables.</DESC>
              </PARAM>
              <PARAM name="exclude" type="ARRAY">
                <DESC>Exclude tables.</DESC>
              </PARAM>
            </PARAMS>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="isTableExist" generateAPI="false">
        <DESC>Will return true or false if the specified table exists in the current database.</DESC>
        <PARAMS>
          <PARAM name="tableName" type="STRING">
            <DESC>The name of the table.</DESC>
          </PARAM>
        </PARAMS>
        <RETURN type="BOOLEAN"/>
      </METHOD>
      <METHOD name="setDoNotBackupAttribute" generateAPI="false" generateDoc="false" productException="eb">
        <DESC>Set "do not backup attribute" for the database file. This is special flag set on files, which will exclude it from iCloud service.</DESC>
        <PLATFORM>iOS</PLATFORM>
        <PARAMS>
          <PARAM name="setFlag" type="BOOLEAN">
            <DESC></DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
    </METHODS>

    <USER_OVERVIEW>
      <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
      <![CDATA[]]>

    </USER_OVERVIEW>
    <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
    <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
    <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
    <EXAMPLES>
      <EXAMPLE title="Using Transactions">
        <SECTIONS>
          <SECTION>
            <DESC>To insert/update multiple object/models use database transactions. This is the most performant method to initialize your application with a large set of data.</DESC>
            <CODE>
              <RUBY>
                <![CDATA[
db = Rho::Database.new
db.startTransaction
begin
  items.each do |item|
    # create hash of attribute/value pairs
    data = {
      :field1 => item['value1'],
      :field2 => item['value2']
    }
    # Creates a new itemModel object and saves it
    new_item = itemModel.create(data)
  end
  db.commitTransaction
rescue
  db.rollbackTransaction
end
]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var db = Rho.Database;
db.startTransaction();
try
{
  for (var index in items) {
    // create hash of attribute/value pairs
    data = {
      field1 : item[index].value1,
      field2 : item[index].value2
    };
    // Creates a new itemModel object and saves it
    new_item = itemModel.create(data);
  }

 db.commitTransaction();
}
catch
{
 db.rollbackTransaction();
}
]]>
              </JAVASCRIPT>
            </CODE>
          </SECTION>
        </SECTIONS>
      </EXAMPLE>

      <EXAMPLE title="Open and close database">
        <SECTIONS>
          <SECTION>
            <DESC>The following example opens the database using the `constructor` method: .initialize. It then closes the database using the destructor method `.close()`</DESC>
            <CODE>
              <RUBY>
                <![CDATA[
db = Rho::Database.new(Rho::Application.databaseFilePath('test'), 'test')
db.close()
]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var db = new Rho.Database(Rho.Application.databaseFilePath('test'), 'test');
db.close();
]]>
              </JAVASCRIPT>
            </CODE>
          </SECTION>
        </SECTIONS>
      </EXAMPLE>
      <EXAMPLE title="destroyTables">
        <SECTIONS>
          <SECTION>
            <DESC>Destroy multiple tables. The following example opens the database using the `constructor` method: .initialize.</DESC>
            <CODE>
              <RUBY>
                <![CDATA[
db = Rho::Database.new(...)

# destroy all tables in database
db.destroyTables(:include => [], :exclude => [])

# destroy specified tables
db.destroyTables(:include => ['table1', 'table2'], :exclude => [])

# destroy all but specified tables
db.destroyTables(:include => [], :exclude => ['table1', 'table2'])
]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var db = new Rho.Database(...);

// destroy all tables in database
db.destroyTables({include: [], exclude: []});

// destroy specified tables
db.destroyTables({include: ['table1', 'table2'], exclude: []});

// destroy all but specified tables
db.destroyTables({include: [], exclude: ['table1', 'table2']});
]]>
              </JAVASCRIPT>
            </CODE>
          </SECTION>
        </SECTIONS>
      </EXAMPLE>
    </EXAMPLES>
  </MODULE>
</API>