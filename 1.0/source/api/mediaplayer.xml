<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Mediaplayer" parent="Rho">
        <HELP_OVERVIEW>The MediaPlayer extension is used to playback different types of audio files. It also allows the playback of Ringtones for the respective platform.
        </HELP_OVERVIEW>    
<MORE_HELP>
## Enabling the API           
In order to use this API you must include the following extension in your `build.yml`
    :::ruby
    extensions: ["mediaplayer"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby
        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the MediaPlayer API: 

* Include all ebapi modules or 
* Include only the API modules you need 

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the MediaPlayer API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.mediaplayer.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.
</MORE_HELP_EB>            

        <PLATFORM>WM, CE, Android, iOS</PLATFORM>
        
        <TEMPLATES>
        </TEMPLATES>

        <METHODS>
            <!-- Following two methods are for MediaPlayer -->
            <METHOD name="start" access="STATIC" hasCallback="none">
                <DESC>Play the audio file using the supplied filename. On WM/CE devices, the API supports only wav file format.</DESC>
                <PLATFORM>WM, CE, Android, iOS</PLATFORM>
                <PARAMS>
                    <PARAM name="filename" type="STRING">
                        <DESC>File name of the audio media to be played - absolute filepath. On iOS when you post URL to remote server (except https), then we open a standard browser (another application) for playing it. On iOS we support: mp3, mp4, wav formats. On other platforms the formats supported depend on what support is built into the platform. Typically on WM/CE this will be wav and on Android mp3.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="stop" access="STATIC" hasCallback="none">
                <DESC>Stop playing the media file. Not applicable on iOS, because on iOS the special UI is opened for playback audio / video - user can stop / close player by UI.</DESC>
                <PLATFORM>WM, CE, Android</PLATFORM>
            </METHOD>

            <!-- The following methods describe playback for video media -->
            <METHOD name="startvideo" access="STATIC" hasCallback="none" runInThread="ui">
                <DESC>Play the media file using the supplied filename. On WM/CE devices, it launches a media player process to play the supplied filename.</DESC>
                <PARAMS>
                    <PARAM name="filename" type="STRING" runInThread="ui">
                        <DESC>File name of the video media to be played - full filepath. On iOS when you post URL to remote server  (except https), then we open a standard browser (another application) for playing it. On iOS we support: mov, mp4, 3gp formats. On other platforms the formats supported depend on what support is built into the platform. Typically on WM/CE this will be wmv and on Android mp4.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="stopvideo" access="STATIC" hasCallback="none">
                <DESC>Stop the playback of a currently playing video file. Not applicable on iOS, because on iOS the special UI is opened for playback audio / video - user can stop / close player by UI.</DESC>
                <PLATFORM>WM, CE, Android</PLATFORM>
            </METHOD>

            <!-- These three methods are for RingtoneManager-->
            <METHOD name="getAllRingtones" access="STATIC" hasCallback="mandatory">
                <DESC>Getting all ringtones on the device - result is array of hashes , each HASH contains name, fullname pairs of info about ringtone.</DESC>    
                <PLATFORM>Android</PLATFORM>
                <CALLBACK type="ARRAY">
                    <PARAM type="HASH">
                        <PARAMS>
                            <PARAM name="name" type="STRING">
                                <DESC></DESC>
                            </PARAM>
                            <PARAM name="fullname" type="STRING">
                                <DESC></DESC>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </CALLBACK>
            </METHOD>

            <METHOD name="playRingTone" access="STATIC" hasCallback="none">
                <DESC>Play a ringtone with the name supplied being used to designate which one. You cannot supply a location for the ringtone. They are built in. To get a full list of all ringtones available on the system use the method getAllRintones.</DESC>
                <PLATFORM>Android</PLATFORM>
                <PARAMS>
                    <PARAM name="name" type="STRING">
                        <DESC>Name of the ringtone to be played.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="stopRingTone" access="STATIC" hasCallback="none">
                <DESC>Stop the currently playing ringtone.</DESC>
                <PLATFORM>Android</PLATFORM>
            </METHOD>
        </METHODS>
        
        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[]]>
        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>
            <!--  This section is used for the supported platform images at the top -->
        </PLATFORM>
        <REMARKS>
            <REMARK title="Availbility of Operating System">
                <DESC><![CDATA[
Because the MediaPlayer extension uses the operating system's built-in player for some media types, it may be possible for the user to access operating system features while media is playing.
                ]]></DESC>
            </REMARK>
            <REMARK title="Playback Controls">
                <DESC><![CDATA[
Because the MediaPlayer extension uses the operating system's built-in player for some media types, the playback controls available to the user are outside the control of RhoElements. Some players may have no playback controls in which the user will have to wait for the media to finish playing.
                ]]></DESC>
            </REMARK>
            <REMARK title="Android Support">
                <DESC><![CDATA[
On Android devices, HTTPS is supported only on Android versions 4.0 (Ice Cream Sandwich) or newer.
                ]]></DESC>
            </REMARK>
            <REMARK title="Using File Transfer">
                <DESC><![CDATA[
When more flexible file transfer is required than is provided by MediaPlayer itself it is recommended to use the Network API to fetch the media file, and then to play the local file using MediaPlayer. For example, if playing a file from an FTP server, or an HTTP server requiring authentication. This can also be more efficient if the same file is to be played multiple times, especially on Windows Mobile/CE, where there is no streaming support and therefore the file is completely downloaded before being played. On Windows Mobile/CE devices, HTTPS file transfer is not supported.
                ]]></DESC>
            </REMARK>
        </REMARKS>
        <EXAMPLES>
           <EXAMPLE title="Play the first available ringtone">
            <SECTIONS>
              <SECTION>
               <CODE>
                <RUBY>
                  <![CDATA[
def list_ringtones
  # Enumerate ringtones
  Rho::Mediaplayer.getAllRingtones(url_for(:action => :list_ringtones_callback))
end

def list_ringtones_callback
  # Play the first ringtone
  first_ringtone = @params[0]["name"]
  Rho::Mediaplayer.playRingTone(first_ringtone)
end
                   ]]>
                 </RUBY>
                <JAVASCRIPT>
                  <![CDATA[
function list_ringtones() {
  // Enumerate ringtones
  Rho.Mediaplayer.getAllRingtones(list_ringtones_callback);
}

function list_ringtones_callback(params) {
  // play the first ringtone
  var first_ringtone = params[0]["name"];
  Rho.Mediaplayer.playRingTone(first_ringtone);
}
                  ]]>
                 </JAVASCRIPT>
               </CODE>
              </SECTION>
            </SECTIONS>
           </EXAMPLE>
        </EXAMPLES>
    </MODULE>
</API>
