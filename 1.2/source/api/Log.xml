<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Log" parent="Rho">
        <HELP_OVERVIEW> Use this API to control the behavior of the RhoMobile Log API as well as access it.
          This API gives access to the Logging functionality. There are five functions to add messages to the log with different severity (from lowest to highest) : trace, info, warning, error and fatal. Each of those functions gets two parameters: message and category. Category is an user defined group that helps with used  searching and filtering.

Accessing Log File:
sendLogFile: will sent all the log to server
showLog: brings up popup with log,
readLogFile: returns the full log file,
cleanLogFile: removes all logged messages

Filtering:

* Using level property: It limits minimal severity of messages that will be added to log. For example: setting log level to 2 (warning) will filter out messages generated by trace and info.

* Categories: user defined groups that are used to select messages from different modules for ease of use. There are two main filters: includeCategories and excludeCategories. They are both active at the same time. includeCategories allows to select groups/categories that should be in the log (setting this property to empty will turn disable logging). excludeCategories is used for filtering out some of categories.

* excludeFilter, this filter is used to remove all sensitive information like passwords, security tokens from log.

Log destinations (any combinations of them):

* debug console (stdio),
* device filesystem (file)
* remote sever (url)
</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby
        </MORE_HELP>
        <MORE_HELP_EB>
## Enabling the API
There are two methods of enabling the Log API:

* Include all ebapi modules or
* Include only the API modules you need

For either of these methods, you'll need to include files from the `/Enterprise Browser/JavaScript Files/Enterprise Browser` directory on the computer that you installed the Enterprise Browser.

### Include all JS API modules
To include all JS APIs, you must copy the ebapi-modules.js file to a location accessible by your app's files and include the JavaScript file in your app. For instance, to include the modules file in your index.html, with the file in the same directory as your index.html, you would add the following line to the &lt;head&gt; section of your index.html:

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi-modules.js"&gt;&lt;/script&gt;

> Note: that the pathing for this file is relative to the current page.

This will define the EB class within the page. Any page you need to use the modules will need to have the .js file included in this fashion.

### Include only the modules you need
To include single APIs, you must first include the `ebapi.js` in your HTML as well as the API file you want to use. For instance, to use the Log API, I would add the following code to my HTML file(s), assuming the API files have been copied to the same directory as the HTML.

    :::html
    &lt;script type="text/javascript" charset="utf-8" src="ebapi.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8" src="eb.log.js"&gt;&lt;/script&gt;

The ebapi.js file is necessary for all single API inclusions.


        </MORE_HELP_EB>

        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES access="STATIC" generateAccessors="true">
            <PROPERTY name="level" type="INTEGER">
                <DESC>The current logging level. Minimal severity level of messages that will appear in log. When level is set to 0 any messages will be logged. When level is set to 4 only fatal error messages will be logged. Default value is defined in rhoconfig.txt (MinSeverity) </DESC>
                <DESC_EB>The current logging level. Minimal severity level of messages that will appear in log. When level is set to 0 any messages will be logged. When level is set to 4 only fatal error messages will be logged. Default value is defined in Config.xml </DESC_EB>
                <VALUES>
                    <VALUE constName="LEVEL_TRACE" value = "0">
                        <DESC>Everything will be logged. Also see settings for controlling log size.</DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_INFO" value = "1">
                        <DESC>Information level logs and above will be shown.</DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_WARNING" value = "2">
                        <DESC>Warnings and above will only be shown.</DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_ERROR" value = "3">
                        <DESC>Error level log messages and above will be shown.</DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_FATAL" value = "4">
                        <DESC>Fatal level log messages and above will be shown.</DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>

            <PROPERTY name="destination" type="ARRAY">
                <DESC>List of log destinations that are being used. Destination could be set to empty (disable all logging), Logging to several destinations could be set by setting destination to comma separated list in any order (for example "stdio,file"). By default logging to console can be enabled from rhoconfig.txt (LogToOutput = 1). After Rhodes initialization logging to file is enabled automatically.</DESC>
                <DESC_EB>List of log destinations that are being used. Destination could be set to empty (disable all logging), Logging to several destinations could be set by setting destination to comma separated list in any order (for example "stdio,file"). By default logging to console can be enabled from Config.xml). </DESC_EB>
                <VALUES>
                    <VALUE constName="DEST_FILE" value ="file">
                        <DESC>Log is written to a local file on the device (typically rholog.txt)</DESC>
                    </VALUE>
                    <VALUE constName="DEST_OUTPUT" value ="stdio">
                        <DESC>Log is written to the standard output (ex: Android ADB)</DESC>
                    </VALUE>
                    <VALUE constName="DEST_URI" value ="uri">
                        <DESC>Log is written to a remote logger.</DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>

            <PROPERTY name="includeCategories" type="STRING" default="*">
                <DESC>Comma-separated list of included log categories. Set to '\*' (asterisk) to log all categories. Set to '' (empty) to filter out all messages. Default value is '\*' (asterisk), it is set in rhoconfig.txt (LogCategories).</DESC>
                <DESC_EB>Comma-separated list of included log categories. Set to '\*' (asterisk) to log all categories. Set to '' (empty) to filter out all messages. Default value is '\*' (asterisk), it is set in Config.xml.</DESC_EB>
            </PROPERTY>

            <PROPERTY name="excludeCategories" type="STRING" default="">
                <DESC>Comma-separated list of excluded log categories. Set to '' (empty) to allow all messages to be logged. Set to concrete value to filter out log from those categories. Default value is '' (empty), it is set in rhoconfig.txt (ExcludeLogCategories)</DESC>
                <DESC_EB>Comma-separated list of excluded log categories. Set to '' (empty) to allow all messages to be logged. Set to concrete value to filter out log from those categories. Default value is '' (empty), it is set in Config.xml</DESC_EB>
            </PROPERTY>

            <PROPERTY name="fileSize" type="INTEGER" default="50000">
                <DESC>Maximum log file size in bytes, set 0 to unlimited size; when limit is reached, log wraps to beginning of file. Default value is 50000, it is set in rhoconfig.txt (MaxLogFileSize)</DESC>
                <DESC_EB>Maximum log file size in bytes, set 0 to unlimited size; when limit is reached, log wraps to beginning of file. Default value is 50000, it is set in Config.xml</DESC_EB>
            </PROPERTY>

            <PROPERTY name="filePath" type="STRING" default="rholog.txt">
                <DESC>Path to the log file including file name. The path is relative to the platform specific application root or start if from '/' if you wish to store elsewhere ('/mnt/sdcard/myapp.log').  Default file path is "rholog.txt"</DESC>
                <DESC_EB>Path to the log file including file name. The path is relative to the platform specific application root or start if from '/' if you wish to store elsewhere ('/mnt/sdcard/myapp.log').  Default file path is Config.xml</DESC_EB>
            </PROPERTY>

            <PROPERTY name="memoryPeriod" type="INTEGER" default="0">
                <PLATFORM>WM, CE, Android, iOS</PLATFORM>
                <PLATFORM_EB>WM, CE, Android</PLATFORM_EB>
                <DESC>Enables the logging of memory usage in the system; specifies the time interval in milliseconds at which memory logs will be generated periodically. Setting it to 0 will disable logging memory information.</DESC>
            </PROPERTY>

            <PROPERTY name="netTrace" type="BOOLEAN" default="false">
                <DESC>Turn on local http server traces. Traces contain information about connection process, sent and received headers and data. Please note that this parameter will not take an effect in case of remote server app (and / or shared runtime). Default value can be overridden by the setting in rhoconfig.txt (net_trace) </DESC>
                <DESC_EB>Turn on local http server traces. Traces contain information about connection process, sent and received headers and data. Please note that this parameter will not take an effect in case of remote server app (and / or shared runtime). Default value can be overridden by the setting in Config.xml</DESC_EB>
                <PLATFORM>Android, iOS, WP8</PLATFORM>
                <PLATFORM_EB>Android</PLATFORM_EB>
            </PROPERTY>

            <PROPERTY name="skipPost" type="BOOLEAN" default="false">
                <DESC>Skip http package body from log(for security reasons). Please note that this parameter will not take an effect in case of remote server app (and / or shared runtime), no log will appear in this case. </DESC>
            </PROPERTY>

            <PROPERTY name="excludeFilter" type="STRING" default="">
                <DESC>Define exclude parameters log filter(for security reasons) - parameter names separated by comma. It works when user tries to put in log string containing json / urls. Default value is "" (empty). For example, if user set excludeFilter="password", then tries to put in log this string: "{"user":"alex","password":"abcdef","sessionid":123456}", "abcdef" will not appear in log.</DESC>
            </PROPERTY>

            <PROPERTY name="destinationURI" type="STRING" default="">
                <DESC>Log server URI where log will be posted by using Rho::Log.sendLogFile or from the log view. Log server source code is open and available at http://github.com/rhomobile/rhologs, so you can deploy your own logserver. URI format: 'http://host:port[/path][?log_name=appName]'. Default value is set in rhoconfig.txt (logserver)</DESC>
                <DESC_EB>Log server URI where log will be posted by using EB.Log.sendLogFile or from the log view. Log server source code is open and available at http://github.com/rhomobile/rhologs, so you can deploy your own logserver. URI format: 'http://host:port[/path][?log_name=appName]'. Default value is set in Config.xml</DESC_EB>
            </PROPERTY>
        </PROPERTIES>

        <METHODS  access="STATIC">
            <ALIASES>
            </ALIASES>

            <METHOD name="trace">
                <DESC>Log message at the Trace level. By default trace messages are not shown in log (if level equals to 1).</DESC>
                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="info">
                <DESC>Log message at the Info level.</DESC>
                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="warning">
                <DESC>Log message at the Warning level.</DESC>
                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="error">
                <DESC>Log message at the Error level.</DESC>
                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="fatalError">
                <DESC>Log message at the FatalError level. Application will be terminated (on all platforms except iOS).</DESC>
                <DESC_EB>Log message at the FatalError level. Application will be terminated.</DESC_EB>
                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="sendLogFile" hasCallback="optional">
                <DESC>Send log file to destinationURI property. Please note that this procedure is blocking and will stop any logging while log file is being send.</DESC>
            </METHOD>

            <METHOD name="showLog">
                <DESC>Display Log view window.</DESC>
                <PLATFORM>WM, CE, Win32, iOS, Android</PLATFORM>
                <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
            </METHOD>

            <METHOD name="cleanLogFile">
                <DESC>Clean log file, all logged messages will be removed. </DESC>
            </METHOD>

            <METHOD name="readLogFile">
                <DESC>Read log file. Returns string from the log file containing specified number of symbols.</DESC>
                <PARAMS>
                    <PARAM name="limit" type="INTEGER">
                        <DESC>Maximum size of the resulting string in symbols.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="STRING"/>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[]]>

        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
        <EXAMPLES >
           <EXAMPLE title="Show log file">
               <SECTIONS>
               <SECTION>
               <DESC>Show the contents of the log file in a window with controls to refresh, clear and send. Useful for debugging and when asking users to report error messages.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
Rho::Log.showLog]]>
                </RUBY>
                <JAVASCRIPT>
           <![CDATA[
Rho.Log.showLog();]]>
                </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
          <EXAMPLE title="Read log file content">
               <SECTIONS>
               <SECTION>
               <DESC>Retrieve the contents of the log file as a string.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Read at most 16384 symbols
logFileContent = Rho::Log.readLogFile 16384]]>
                </RUBY>
                <JAVASCRIPT>
           <![CDATA[
//Read at most 16384 symbols
logFileContent = Rho.Log.readLogFile(16384);]]>
                </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Clean log file">
               <SECTIONS>
               <SECTION>
               <DESC>Clear the contents of the log file. In this example, logFileContentBefore will contain the log up until that point, while logFileContentAfter will be empty.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Read log file
logFileContentBefore = Rho::Log.readLogFile 16384

# Clear log file
Rho::Log.cleanLogFile

# Read log file again - this time it will be empty
logFileContentAfter = Rho::Log.readLogFile(16384]]>
                </RUBY>
                <JAVASCRIPT>
           <![CDATA[
// Read log file
logFileContentBefore = Rho.Log.readLogFile(16384);

// Clear log file
Rho.Log.cleanLogFile();

// Read log file again - this time it will be empty
logFileContentAfter = Rho.Log.readLogFile(16384);]]>
                </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Logging categories">
               <SECTIONS>
               <SECTION>
               <DESC>Categories help you organize your logging messages and find related statements using tools like grep or a text editor's "search" function.</DESC>
               <CODE>
                <RUBY>
           <![CDATA[
Rho::Log.info("Consectetuer adipiscing elit", "Lorem Ipsum")
Rho::Log.info("Foo acquired value Bar in method Baz", "Miscellaneous")

#The above code will result in logging statements like these
Lorem Ipsum| Consectetuer adipiscing elit
Miscellaneous Foo acquired value Bar in method Baz
]]>
                </RUBY>
                <JAVASCRIPT>
           <![CDATA[
Rho.Log.info("Consectetuer adipiscing elit", "Lorem Ipsum");
Rho.Log.info("Foo acquired value Bar in method Baz", "Miscellaneous");

//The above code will result in logging statements like these
Lorem Ipsum| Consectetuer adipiscing elit
Miscellaneous Foo acquired value Bar in method Baz
]]>
                </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Memory Usage">
               <SECTIONS>
               <SECTION>
               <DESC>You can ask the system to automatically log memory usage information on a set interval. This can be used to debug potential memory leaks in operations where a high number of objects are touched in memory. </DESC>
               <CODE>
                <RUBY>
           <![CDATA[
# Request that memory usage be logged automatically by the system every second.
Rho::Log.memoryPeriod = 1000
# Perform memory-intensive operations here. Examining the log will tell us if we have a memory leak
# Once our task finishes, disable automatic memory logging
Rho::Log.memoryPeriod = 0]]>
                </RUBY>
                <JAVASCRIPT>
           <![CDATA[
Rho.Log.memoryPeriod = 1000;
// Perform memory-intensive operations here. Examining the log will tell us if we have a memory leak
// Once our task finishes, disable automatic memory logging
Rho.Log.memoryPeriod = 0;]]>
               </JAVASCRIPT>
               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
       </EXAMPLES>
    </MODULE>
</API>