<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="ORM" parent="Rho" generateUnderscoreRubyNames="true" generateAPI="false" productException="eb">
        <HELP_OVERVIEW>This JavaScript API class allows you to interact with the local RHOM database and programatically add models or get references to models.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

If you are going to be using the JS ORM API, you'll also need to include these lines in any files that will be using it:

    :::html
    <![CDATA[<script type="text/javascript" charset="utf-8" src="/public/api/rhoapi-modules-ORM.js"></script>]]>
    <![CDATA[<script type="text/javascript" charset="utf-8" src="/public/api/rhoapi-modules-ORMHelper.js"></script>]]>
    <![CDATA[<script type="text/javascript" charset="utf-8" src="/public/api/rhoapi-modules-Ruby-RunTime.js"></script>]]>

## Ruby Usage
For Ruby access to the RHOM database please see the [Rhom Ruby API guide](/api/rhom-api).
        </MORE_HELP>

        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES>

        </PROPERTIES>

        <METHODS access="STATIC">
            <ALIASES>
            </ALIASES>
            <METHOD name="databaseFullReset" generateAPI="false">
                <DESC>Deletes all records from the property bag and model tables.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="resetClientInfo" type="BOOLEAN">
                        <DESC>True to clean the client_info table, false otherwise.</DESC>
                        <DEFAULT>false</DEFAULT>
                        <CAN_BE_NIL>
                            <DESC>False on default.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                    <PARAM name="resetLocalModels" type="BOOLEAN">
                        <DESC>True to clean local (non-synced) models, false otherwise.</DESC>
                        <DEFAULT>false</DEFAULT>
                        <CAN_BE_NIL>
                            <DESC>Reset all models.</DESC>
                        </CAN_BE_NIL>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="import" deprecated="true" generateAPI="false">
                <DESC>Import db.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="zipName" type="STRING">
                        <DESC>The name of the zip file.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="getClientId" generateAPI="false">
                <DESC>Returns the current sync client id.</DESC>
                <APPLIES jsOnly="true"/>
                <RETURN type="STRING"/>
            </METHOD>

            <METHOD name="haveLocalChanges" generateAPI="false">
                <DESC>Returns true if any of the Rhodes model objects have local database changes that need to be synchronized, false otherwise.</DESC>
                <APPLIES jsOnly="true"/>
                <RETURN type="BOOLEAN"/>
            </METHOD>

            <METHOD name="export" deprecated="true"  generateAPI="false">
                <DESC>Export db.</DESC>
                <RETURN type="STRING"/>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="databaseFullResetAndLogout" generateAPI="false">
                <DESC>Deletes all records from the property bag and model tables. Logout the user from RhoConnectClient. For examples, see Resetting the Database in Using the Local Database with ORM.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="databaseLocalReset" generateAPI="false">
                <DESC>Reset only local (non-sync-enabled) models.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="databaseFullclientResetAndLogout" generateAPI="false">
                <DESC>Deletes all records from the property bag and model tables. Logout the user from RhoConnectClient and erase all RhoConnectClient device information. Equivalent to ORM::ORM.databaseFullReset(true) followed by RhoConnectClient.logout.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="databaseFullResetEx" generateAPI="false">
                <DESC>Deletes all records from the property bag and model tables for the model names passed in parameters.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="propertyMap" type="HASH" propertyHash="true">
                        <DESC>Properties map.</DESC>
                        <PARAMS>
                            <PARAM name="models" type="ARRAY">
                                <DESC>Array of models names to reset.</DESC>
                            </PARAM>
                            <PARAM name="reset_client_info" type="BOOLEAN">
                                <DESC>If set to true, client_info table will be cleaned.</DESC>
                                <CAN_BE_NIL>
                                    <DESC>False on default.</DESC>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name="reset_local_models" type="BOOLEAN" default="false">
                                <DESC>If set to true, local(non-synced models) will be cleaned.</DESC>
                                <CAN_BE_NIL>
                                    <DESC>Reset all models.</DESC>
                                </CAN_BE_NIL>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </PARAMS>
            </METHOD>
            <METHOD name="getModel" generateAPI="false">
                <DESC>Returns a model.</DESC>
                <PARAMS>
                    <PARAM name="modelName" type="String">
                        <DESC>Name of the model you want returned.</DESC>
                    </PARAM>
                </PARAMS>
                <APPLIES jsOnly="true"/>
                <RETURN type="Model"/>
            </METHOD>
            <METHOD name="addModel" generateAPI="false">
                <DESC>Creates an ORM model reference.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="Anoynomous Function methods" type="">
                        <PARAMS>
                            <PARAM name='modelName("value")' type='STRING'>
                                <DESC>The name of your model.</DESC>
                            </PARAM>
                            <PARAM name='enable("value")' type='STRING'>
                                <DESC>Enables Model Properties.</DESC>
                                <VALUES>
                                    <VALUE value ="sync">
                                        <DESC>If set then model is set for RhoConnect Sync.</DESC>
                                    </VALUE>
                                    <VALUE value ="propertyBag">
                                        <DESC>(Default) Model will be of type propertyBag.</DESC>
                                    </VALUE>
                                    <VALUE value ="fixedSchema">
                                        <DESC>Model will be of type fixedSchema.</DESC>
                                    </VALUE>
                                </VALUES>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name='property("name","type")' type='STRING,STRING'>
                                <DESC>Used to create properties on your model.</DESC>
                                <PARAMS>
                                    <PARAM name="name" type="STRING">
                                        <DESC>The name of the property.</DESC>
                                    </PARAM>
                                    <PARAM name="type" type="STRING">
                                        <DESC>The type of property value: String, Float, integer, Varchar, Blob - String is default.</DESC>
                                    </PARAM>
                                </PARAMS>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name='addIndex("name",[colArray])' type='STRING, ARRAY'>
                                <DESC>Add an index to your fixedSchema model.</DESC>
                                <PARAMS>
                                    <PARAM name="name" type="STRING">
                                        <DESC>The name of the index.</DESC>
                                    </PARAM>
                                    <PARAM name="colArray" type="ARRAY">
                                        <DESC>Array of model column names to use in index, Ex: ['name','qty']</DESC>
                                    </PARAM>
                                </PARAMS>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name='addUniqueIndex("name",[colArray])' type='STRING, ARRAY'>
                                <DESC>Add an index to your fixedSchema model.</DESC>
                                <PARAMS>
                                    <PARAM name="name" type="STRING">
                                        <DESC>The name of the index.</DESC>
                                    </PARAM>
                                    <PARAM name="colArray" type="ARRAY">
                                        <DESC>Array of model column names to use in index, Ex: ['name','qty']</DESC>
                                    </PARAM>
                                </PARAMS>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name='belongs_to("name")' type='STRING'>
                                <DESC>Add belongs_to association to another defined model, for sync models. Comma-separated String for more than one model.</DESC>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                            </PARAM>
                            <PARAM name='set(property,value)' type='STRING,VALUE'>
                                <DESC>Set Behavior of this model. Possible `property` options and corresponding values.</DESC>
                                <CAN_BE_NIL>
                                </CAN_BE_NIL>
                                <PARAMS>
                                    <PARAM name="partition" type="STRING">
                                        <DESC>The partition to use for this model. Partitions can be used to segment the data and keep non-synched data separate from synched models. Possible `values`.</DESC>
                                        <VALUES>
                                            <VALUE value ="local">
                                                <DESC>This partition is used automatically if the model is not a sync model.</DESC>
                                            </VALUE>
                                            <VALUE value ="user">
                                                <DESC>This partition is used automatically if the model is a sync model.</DESC>
                                            </VALUE>
                                        </VALUES>
                                    </PARAM>
                                    <PARAM name="sync_type" type="STRING">
                                        <DESC>Sets the type of sync it will be. </DESC>
                                        <VALUES>
                                            <VALUE value ="none">
                                                <DESC>If data model is not a sync model.</DESC>
                                            </VALUE>
                                            <VALUE value ="incremental">
                                                <DESC>Used when the data model is a sync model. Just syncs changes.</DESC>
                                            </VALUE>
                                        </VALUES>
                                    </PARAM>
                                    <PARAM name="sync_priority" type="INTEGER">
                                        <DESC>Determines how frequently to check for changes. In seconds. Default is 1000. </DESC>
                                    </PARAM>
                                </PARAMS>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </PARAMS>
                <RETURN type="Model"/>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
          <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
          <![CDATA[]]>

        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>

        <EXAMPLES>
            <EXAMPLE title="Add ORM model, create ORM object">
            <SECTIONS>
                <SECTION>
                    <DESC>This example describes creating model and adding model object.</DESC>
                    <CODE>
                        <JAVASCRIPT>
                <![CDATA[
var productModel = Rho.ORM.addModel(function(model){
  model.modelName("Product");
  model.enable("sync");
  model.property("name","string");
  model.property("brand","string");
  model.property("price","float");
  model.set("partition","user");
});

// create model object and save it to database
var product = productModel.create({
  brand: 'Apple',
  name: 'iPhone5',
  price: 199.99});

// read product from database
var product = productModel.find('first');
product.get('brand'); // Apple
product.get('name'); // iPhone5
]]>
                        </JAVASCRIPT>
                    </CODE>
                </SECTION>
            </SECTIONS>
        </EXAMPLE>
       <EXAMPLE title="Get Model by name">
        <SECTIONS>
            <SECTION>
                <DESC>Get a model.</DESC>
                <CODE>
                    <JAVASCRIPT>
   <![CDATA[
// The model 'Product' must have been defined in JavaScript execution earlier
// in order for 'getModel' to work properly.

// The models generated in RhoStudio, are not accessible in JavaScript unless
// the classes are defined via the  Rho.ORM.addModel api


// Get a model by its name after it has been added
var productModel = Rho.ORM.getModel("Product");

           ]]>
                    </JAVASCRIPT>
                </CODE>
            </SECTION>
        </SECTIONS>
        </EXAMPLE>
            <EXAMPLE title="ORM databaseFullResetEx Method Examples">
                <SECTIONS>
                    <SECTION>
                        <DESC>Delete all Rhodes model objects for a source, filtering by conditions.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
Rho.ORM.databaseFullResetEx({'models' : ['Product', 'Customer'], 'reset_client_info' : true, 'reset_local_models' : true} ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
        </EXAMPLES>
        <REMARKS>
            <REMARK title='Performance Findings Using Property Bag Vs Fixed Schema'>
                <DESC><![CDATA[
In our testing, we have found that, overall, the Fixed Schema database model has much better performance that the same tests run using Property Bag, concerning complex data sets. We strongly recommend that enterprise-grade apps use the Fixed Schema model for their app databases as we have seen test results upwards of 10 times faster using the Fixed Schema model. The only current drawback to Fixed Schema is that it is more complex to initially setup. If your dataset is fairly simple in construction, Property Bag should prove sufficient.
                    ]]></DESC>
            </REMARK>
        </REMARKS>
    </MODULE>
</API>