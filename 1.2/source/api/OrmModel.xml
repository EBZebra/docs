<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="[Your-OrmModel]" parent="Rho" productException="eb">
        <HELP_OVERVIEW>RhoMobile applications provide automatic JavaScript CRUD methods for any models that you have defined to interact with the database.  You must define a model class by using the [ORM.addModel](Orm#maddModel) method before you can use the API's referenced here.  See [Orm](Orm) to learn about defining and adding a model.

All methods here are accessed from the model instance object that you have created. In places where you see `[Your-OrmModel]` on this page, you would use the instance object instead.

    :::js
    var productModel = Rho.ORM.addModel(function(model){
      model.modelName("Product");
      model.enable("sync");
      model.property("name","string");
      model.property("brand","string");
      model.property("price","float");
      model.set("partition","user");
    });

    // create model object and save it to database
    var product = productModel.create({
      brand: 'Apple',
      name: 'iPhone5',
      price: 199.99});

    // read product from database
    var product = productModel.find('first');
    product.get('brand'); // Apple
    product.get('name'); // iPhone5

        </HELP_OVERVIEW>
        <LINK><a href='./Orm'>Orm</a></LINK>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
For Ruby access to the RHOM database please see the [Rhom Ruby API guide](/api/rhom-api).
        </MORE_HELP>

        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES>
        </PROPERTIES>

        <METHODS>
            <METHOD name="deleteAll" generateAPI="false" >
                <DESC>Delete all Rhodes model objects for a source.For JavaScript you cannot specify conditions.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="find" generateAPI="false">
                <DESC>Find model objects.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="queryType" type="STRING">
                        <VALUES>
                            <VALUE value="all" type="STRING">
                                <DESC>returns all objects; can use optional :conditions.</DESC>
                            </VALUE>
                            <VALUE value="first" type="STRING">
                                <DESC>returns first object matching :conditions.</DESC>
                            </VALUE>
                            <VALUE value="count" type="STRING">
                                <DESC>returns the number of objects matching these :conditions.</DESC>
                            </VALUE>
                        </VALUES>
                    </PARAM>
                    <PARAM name="queryOptions" type="HASH">
                        <DESC>An object of selection options</DESC>
                        <PARAMS>
                            <PARAM name="conditions" type="HASH">
                                <DESC>A name:value object that you want to find. Ex: conditions { name:'Symbol'}.</DESC>
                                <PARAMS>
                                    <PARAM name="propertyName" type=""></PARAM>
                                    <PARAM name="propertyValue" type=""></PARAM>
                                </PARAMS>
                            </PARAM>
                            <PARAM name="order" type="STRING">
                                <DESC>Attribute(s) to order the list. This cannot be used when using a select parameter and you must pass a conditions hash.</DESC>
                                <CAN_BE_NIL/>
                            </PARAM>
                            <PARAM name="orderdir" type="STRING">
                                <DESC>Order direction. This cannot be used when using a select parameter and you must pass a conditions hash</DESC>
                                <VALUES>
                                    <VALUE value="ASC" type="STRING">
                                        <DESC>Ascending order. (Default)</DESC>
                                    </VALUE>
                                    <VALUE value="DESC" type="STRING">
                                        <DESC>Descending Order</DESC>
                                    </VALUE>
                                </VALUES>
                                <CAN_BE_NIL/>
                            </PARAM>
                            <PARAM name="select" type="ARRAY">
                                <DESC>Array of string attributes to return with the object. Useful if your model has many attributes and your query only needs a few of them. This cannot be used in combination with order or orderdir.</DESC>
                                <CAN_BE_NIL/>
                            </PARAM>
                        </PARAMS>
                    </PARAM>
                </PARAMS>
                <RETURN type="ARRAY"/>
            </METHOD>

            <METHOD name="make" generateAPI="false" >
                <DESC>Create a new Rhodes model object JavaScript reference but does not save it to the database. To save this reference to the database, you will need to execute the .save() method. See the ORM new example.</DESC>
                <PARAMS>
                    <PARAM name="attributes" type="HASH">
                        <DESC>List of attributes assigned to the new model object, such as {name:"ABC Inc.",address:"5555th St."}.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="OBJECT"/>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="create" generateAPI="false" >
                <DESC>Create a new Rhodes model object and save it to the database. This is the fastest way to insert a single item into the database.</DESC>
                <APPLIES jsOnly="true"/>
                <PARAMS>
                    <PARAM name="attributes" type="HASH">
                        <DESC>List of attributes assigned to the new model object, such as {name : "ABC Inc.",address: "555 5th St."}.</DESC>
                    </PARAM>
                </PARAMS>
                <RETURN type="OBJECT"/>
            </METHOD>

            <METHOD name="destroy" generateAPI="false">
                <DESC>Destroy a Rhodes model object and removes the record from the database.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="canModify" deprecated="true" generateAPI="false">
                <DESC>Returns true if the Rhodes model object is not currently being synced (if it is being synced, you should disable editing of the object). Before displaying an edit page for an object, your application can check if the object is currently being accessed by the sync process. If it is, you should disable editing of the object. can_modify could return true, for example, on a new local record that was created and sent to the RhoConnect application, but no response has been received yet.</DESC>
                <RETURN type="BOOLEAN"/>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="vars" generateAPI="false">
                <DESC>Returns an object containing all propertyName and values for the model. You can use myModel.vars().name instead of myModel.get('name').</DESC>
                <RETURN type="HASH"/>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="object" generateAPI="false">
                <DESC>Returns the unique ID for the data record. Use this to identify records. You can also use this in a .find() method for retrieving a specific record.</DESC>
                <RETURN type="STRING"/>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="has" generateAPI="false">
                <DESC>Returns true or false if the model has the propertyName given.</DESC>
                <RETURN type="BOOLEAN"/>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
                        <DESC>The name of the property you are checking for validity. See also the vars() method.</DESC>
                    </PARAM>
                </PARAMS>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="get" generateAPI="false">
                <DESC>Get the value of a property of the current model.Ex: myModel.get('name'); See also the vars() method.</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
                        <DESC>The name of the property you are trying to retrieve. </DESC>
                    </PARAM>
                </PARAMS>
                <APPLIES jsOnly="true"/>
                <RETURN type="STRING">
                    <DESC>Value of the specified property from the database.</DESC>
                </RETURN>
            </METHOD>

            <METHOD name="set" generateAPI="false">
                <DESC>Sets the value of a property of the current model. Ex: myModel.set('name','new name'); This does not save to the database until you execute a myModel.save().</DESC>
                <PARAMS>
                    <PARAM name="propertyName" type="STRING">
                        <DESC>The name of the property you are trying to set.</DESC>
                    </PARAM>
                    <PARAM name="propertyValue" type="STRING">
                        <DESC>The value you are setting in the current model. After setting values you must issue a .save() in order for the data to be saved to the database.</DESC>
                    </PARAM>
                </PARAMS>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="save" generateAPI="false">
                <DESC>Saves the current Rhodes model object to the database.</DESC>
                <APPLIES jsOnly="true"/>
            </METHOD>

            <METHOD name="updateAttributes" generateAPI="false">
                <DESC>Updates the current Rho model object attributes and saves it to the database. This is the fastest way to add or update model attributes.</DESC>
                <PARAMS>
                    <PARAM name="attributes" type="HASH">
                        <DESC>List of attributes and their updated values, such as {name : "ABC Inc.",address: "555 5th St."}.</DESC>
                    </PARAM>
                </PARAMS>
                <APPLIES jsOnly="true"/>
            </METHOD>
        </METHODS>

        <USER_OVERVIEW>
          <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
          <![CDATA[]]>

        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>WM, CE, Win32, Android, iOS, WP8</PLATFORM>
        <PLATFORM_EB>WM, CE, Win32, Android</PLATFORM_EB>
        <EXAMPLES>
            <EXAMPLE title="ORM Make and Create Method Examples">
                <SECTIONS>
                    <SECTION>
                        <DESC>Use method make for creating a new ORM object and assign given attributes. Make does not save to the database until you execute a .save. To insert a new record right away use the create method instead.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var account = Account.make({name: "ABC Inc.", address: "555 5th St."});
account.get("name") // "ABC Inc." ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Use method Create for creating a new ORM object and save to the database.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var account = Account.create({name: "some new record", industry: "electronics"})  ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="ORM DeleteAll Method Examples">
                <SECTIONS>
                    <SECTION>
                        <DESC>Delete all Rhodes model objects for a source, filtering by conditions.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
Account.deleteAll();]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="ORM Find Method Examples">
                <SECTIONS>
                    <SECTION>
                        <DESC>Find all objects for specific ORM model</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
vat accounts = Account.find('all');]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Find all objects for specific ORM model with conditions</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      conditions: {industry: 'Technology'}
    }
  ) ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Use select option for retrieves some attributes of object.  You must pass "conditions" hash with Javascript implementation.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      conditions: {name:'address'},
      select: ['name','address']
    }
  );
accounts[0].get("name");  // "A.G. Parr PLC 37862"
accounts[0].get("telephone"); // nil ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Order option is used to sort objects by one or more attributes. You must pass a  conditions hash to use ordering.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      conditions: {"name":"industry"},
      order: 'name',
      orderdir: 'DESC'
    }
  ) ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Order by multiple attributes. You must pass conditions hash.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      conditions: {"name":"industry"},
      order: ['name', 'industry'],
      orderdir: ['ASC', 'DESC']
    }
  ); ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Order by one attribute with an orderFunction.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      order: 'name',
      orderFunction: function (a, b) { return a <= b }
    }
  ); ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                    <SECTION>
                        <DESC>Order with a block.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var accounts = Account.find(
    'all',
    {
      orderFunction: function (item1, item2) { return item1.name <= item2.name }
    }
); ]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="ORM Destroy Method Examples">
                <SECTIONS>
                    <SECTION>
                        <DESC>Destroy a Rhodes model object from database.</DESC>
                        <CODE>
                            <JAVASCRIPT>
                <![CDATA[
var account = Account.find('first');
account.destroy();]]>
                            </JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="ORM UpdateAttributes Method Example">
                <SECTIONS>
                    <SECTION>
                        <DESC>Update the current ORM object’s attributes and saves it to the database.</DESC>
                        <CODE>
                            <JAVASCRIPT>
var account = Account.find("first", {conditions: {name: "ABC Inc."});
account.updateAttributes({name: "ABC Inc.", industry: "Technology"});
account.get("industry") // "Technology"</JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>

            <EXAMPLE title="ORM Save Method Example">
                <SECTIONS>
                    <SECTION>
                        <DESC>Saves the current ORM object to the database.</DESC>
                        <CODE>
                            <JAVASCRIPT>
var account = Account.make({name: "some new record", industry: "electronics"});
account.save();</JAVASCRIPT>
                        </CODE>
                    </SECTION>
                </SECTIONS>
            </EXAMPLE>
        </EXAMPLES>
    </MODULE>
</API>